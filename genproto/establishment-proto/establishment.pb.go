// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: establishment-proto/establishment.proto

package establishment_service

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// GENERAL
type Image struct {
	ImageId              string   `protobuf:"bytes,1,opt,name=image_id,json=imageId,proto3" json:"image_id"`
	EstablishmentId      string   `protobuf:"bytes,2,opt,name=establishment_id,json=establishmentId,proto3" json:"establishment_id"`
	ImageUrl             string   `protobuf:"bytes,3,opt,name=image_url,json=imageUrl,proto3" json:"image_url"`
	CreatedAt            string   `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt            string   `protobuf:"bytes,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	DeletedAt            string   `protobuf:"bytes,6,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Image) Reset()         { *m = Image{} }
func (m *Image) String() string { return proto.CompactTextString(m) }
func (*Image) ProtoMessage()    {}
func (*Image) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4f0074a4a4eb033, []int{0}
}
func (m *Image) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Image) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Image.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Image) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Image.Merge(m, src)
}
func (m *Image) XXX_Size() int {
	return m.Size()
}
func (m *Image) XXX_DiscardUnknown() {
	xxx_messageInfo_Image.DiscardUnknown(m)
}

var xxx_messageInfo_Image proto.InternalMessageInfo

func (m *Image) GetImageId() string {
	if m != nil {
		return m.ImageId
	}
	return ""
}

func (m *Image) GetEstablishmentId() string {
	if m != nil {
		return m.EstablishmentId
	}
	return ""
}

func (m *Image) GetImageUrl() string {
	if m != nil {
		return m.ImageUrl
	}
	return ""
}

func (m *Image) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Image) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *Image) GetDeletedAt() string {
	if m != nil {
		return m.DeletedAt
	}
	return ""
}

type Location struct {
	LocationId           string   `protobuf:"bytes,1,opt,name=location_id,json=locationId,proto3" json:"location_id"`
	EstablishmentId      string   `protobuf:"bytes,2,opt,name=establishment_id,json=establishmentId,proto3" json:"establishment_id"`
	Address              string   `protobuf:"bytes,3,opt,name=address,proto3" json:"address"`
	Latitude             float32  `protobuf:"fixed32,4,opt,name=latitude,proto3" json:"latitude"`
	Longitude            float32  `protobuf:"fixed32,5,opt,name=longitude,proto3" json:"longitude"`
	Country              string   `protobuf:"bytes,6,opt,name=country,proto3" json:"country"`
	City                 string   `protobuf:"bytes,7,opt,name=city,proto3" json:"city"`
	StateProvince        string   `protobuf:"bytes,8,opt,name=state_province,json=stateProvince,proto3" json:"state_province"`
	CreatedAt            string   `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt            string   `protobuf:"bytes,10,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	DeletedAt            string   `protobuf:"bytes,11,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Location) Reset()         { *m = Location{} }
func (m *Location) String() string { return proto.CompactTextString(m) }
func (*Location) ProtoMessage()    {}
func (*Location) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4f0074a4a4eb033, []int{1}
}
func (m *Location) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Location) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Location.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Location) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Location.Merge(m, src)
}
func (m *Location) XXX_Size() int {
	return m.Size()
}
func (m *Location) XXX_DiscardUnknown() {
	xxx_messageInfo_Location.DiscardUnknown(m)
}

var xxx_messageInfo_Location proto.InternalMessageInfo

func (m *Location) GetLocationId() string {
	if m != nil {
		return m.LocationId
	}
	return ""
}

func (m *Location) GetEstablishmentId() string {
	if m != nil {
		return m.EstablishmentId
	}
	return ""
}

func (m *Location) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Location) GetLatitude() float32 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *Location) GetLongitude() float32 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *Location) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *Location) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *Location) GetStateProvince() string {
	if m != nil {
		return m.StateProvince
	}
	return ""
}

func (m *Location) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Location) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *Location) GetDeletedAt() string {
	if m != nil {
		return m.DeletedAt
	}
	return ""
}

// ATTRACTION
type Attraction struct {
	AttractionId         string    `protobuf:"bytes,1,opt,name=attraction_id,json=attractionId,proto3" json:"attraction_id"`
	OwnerId              string    `protobuf:"bytes,2,opt,name=owner_id,json=ownerId,proto3" json:"owner_id"`
	AttractionName       string    `protobuf:"bytes,3,opt,name=attraction_name,json=attractionName,proto3" json:"attraction_name"`
	Description          string    `protobuf:"bytes,4,opt,name=description,proto3" json:"description"`
	Rating               float32   `protobuf:"fixed32,5,opt,name=rating,proto3" json:"rating"`
	ContactNumber        string    `protobuf:"bytes,6,opt,name=contact_number,json=contactNumber,proto3" json:"contact_number"`
	LicenceUrl           string    `protobuf:"bytes,7,opt,name=licence_url,json=licenceUrl,proto3" json:"licence_url"`
	WebsiteUrl           string    `protobuf:"bytes,8,opt,name=website_url,json=websiteUrl,proto3" json:"website_url"`
	Images               []*Image  `protobuf:"bytes,9,rep,name=images,proto3" json:"images"`
	Location             *Location `protobuf:"bytes,10,opt,name=location,proto3" json:"location"`
	CreatedAt            string    `protobuf:"bytes,11,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt            string    `protobuf:"bytes,12,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	DeletedAt            string    `protobuf:"bytes,13,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Attraction) Reset()         { *m = Attraction{} }
func (m *Attraction) String() string { return proto.CompactTextString(m) }
func (*Attraction) ProtoMessage()    {}
func (*Attraction) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4f0074a4a4eb033, []int{2}
}
func (m *Attraction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Attraction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Attraction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Attraction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Attraction.Merge(m, src)
}
func (m *Attraction) XXX_Size() int {
	return m.Size()
}
func (m *Attraction) XXX_DiscardUnknown() {
	xxx_messageInfo_Attraction.DiscardUnknown(m)
}

var xxx_messageInfo_Attraction proto.InternalMessageInfo

func (m *Attraction) GetAttractionId() string {
	if m != nil {
		return m.AttractionId
	}
	return ""
}

func (m *Attraction) GetOwnerId() string {
	if m != nil {
		return m.OwnerId
	}
	return ""
}

func (m *Attraction) GetAttractionName() string {
	if m != nil {
		return m.AttractionName
	}
	return ""
}

func (m *Attraction) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Attraction) GetRating() float32 {
	if m != nil {
		return m.Rating
	}
	return 0
}

func (m *Attraction) GetContactNumber() string {
	if m != nil {
		return m.ContactNumber
	}
	return ""
}

func (m *Attraction) GetLicenceUrl() string {
	if m != nil {
		return m.LicenceUrl
	}
	return ""
}

func (m *Attraction) GetWebsiteUrl() string {
	if m != nil {
		return m.WebsiteUrl
	}
	return ""
}

func (m *Attraction) GetImages() []*Image {
	if m != nil {
		return m.Images
	}
	return nil
}

func (m *Attraction) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *Attraction) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Attraction) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *Attraction) GetDeletedAt() string {
	if m != nil {
		return m.DeletedAt
	}
	return ""
}

type GetAttractionRequest struct {
	AttractionId         string   `protobuf:"bytes,1,opt,name=attraction_id,json=attractionId,proto3" json:"attraction_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAttractionRequest) Reset()         { *m = GetAttractionRequest{} }
func (m *GetAttractionRequest) String() string { return proto.CompactTextString(m) }
func (*GetAttractionRequest) ProtoMessage()    {}
func (*GetAttractionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4f0074a4a4eb033, []int{3}
}
func (m *GetAttractionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAttractionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAttractionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAttractionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAttractionRequest.Merge(m, src)
}
func (m *GetAttractionRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAttractionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAttractionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAttractionRequest proto.InternalMessageInfo

func (m *GetAttractionRequest) GetAttractionId() string {
	if m != nil {
		return m.AttractionId
	}
	return ""
}

type GetAttractionResponse struct {
	Attraction           *Attraction `protobuf:"bytes,1,opt,name=attraction,proto3" json:"attraction"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GetAttractionResponse) Reset()         { *m = GetAttractionResponse{} }
func (m *GetAttractionResponse) String() string { return proto.CompactTextString(m) }
func (*GetAttractionResponse) ProtoMessage()    {}
func (*GetAttractionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4f0074a4a4eb033, []int{4}
}
func (m *GetAttractionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAttractionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAttractionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAttractionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAttractionResponse.Merge(m, src)
}
func (m *GetAttractionResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAttractionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAttractionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAttractionResponse proto.InternalMessageInfo

func (m *GetAttractionResponse) GetAttraction() *Attraction {
	if m != nil {
		return m.Attraction
	}
	return nil
}

type ListAttractionsRequest struct {
	Offset               int64    `protobuf:"varint,1,opt,name=offset,proto3" json:"offset"`
	Limit                int64    `protobuf:"varint,2,opt,name=limit,proto3" json:"limit"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListAttractionsRequest) Reset()         { *m = ListAttractionsRequest{} }
func (m *ListAttractionsRequest) String() string { return proto.CompactTextString(m) }
func (*ListAttractionsRequest) ProtoMessage()    {}
func (*ListAttractionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4f0074a4a4eb033, []int{5}
}
func (m *ListAttractionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListAttractionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListAttractionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListAttractionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAttractionsRequest.Merge(m, src)
}
func (m *ListAttractionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListAttractionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAttractionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListAttractionsRequest proto.InternalMessageInfo

func (m *ListAttractionsRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ListAttractionsRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type ListAttractionsResponse struct {
	Attractions          []*Attraction `protobuf:"bytes,1,rep,name=attractions,proto3" json:"attractions"`
	Overall              uint64        `protobuf:"varint,2,opt,name=overall,proto3" json:"overall"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ListAttractionsResponse) Reset()         { *m = ListAttractionsResponse{} }
func (m *ListAttractionsResponse) String() string { return proto.CompactTextString(m) }
func (*ListAttractionsResponse) ProtoMessage()    {}
func (*ListAttractionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4f0074a4a4eb033, []int{6}
}
func (m *ListAttractionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListAttractionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListAttractionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListAttractionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAttractionsResponse.Merge(m, src)
}
func (m *ListAttractionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListAttractionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAttractionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListAttractionsResponse proto.InternalMessageInfo

func (m *ListAttractionsResponse) GetAttractions() []*Attraction {
	if m != nil {
		return m.Attractions
	}
	return nil
}

func (m *ListAttractionsResponse) GetOverall() uint64 {
	if m != nil {
		return m.Overall
	}
	return 0
}

type UpdateAttractionRequest struct {
	Attraction           *Attraction `protobuf:"bytes,1,opt,name=attraction,proto3" json:"attraction"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *UpdateAttractionRequest) Reset()         { *m = UpdateAttractionRequest{} }
func (m *UpdateAttractionRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateAttractionRequest) ProtoMessage()    {}
func (*UpdateAttractionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4f0074a4a4eb033, []int{7}
}
func (m *UpdateAttractionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateAttractionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateAttractionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateAttractionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateAttractionRequest.Merge(m, src)
}
func (m *UpdateAttractionRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateAttractionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateAttractionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateAttractionRequest proto.InternalMessageInfo

func (m *UpdateAttractionRequest) GetAttraction() *Attraction {
	if m != nil {
		return m.Attraction
	}
	return nil
}

type UpdateAttractionResponse struct {
	Attraction           *Attraction `protobuf:"bytes,1,opt,name=attraction,proto3" json:"attraction"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *UpdateAttractionResponse) Reset()         { *m = UpdateAttractionResponse{} }
func (m *UpdateAttractionResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateAttractionResponse) ProtoMessage()    {}
func (*UpdateAttractionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4f0074a4a4eb033, []int{8}
}
func (m *UpdateAttractionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateAttractionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateAttractionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateAttractionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateAttractionResponse.Merge(m, src)
}
func (m *UpdateAttractionResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateAttractionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateAttractionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateAttractionResponse proto.InternalMessageInfo

func (m *UpdateAttractionResponse) GetAttraction() *Attraction {
	if m != nil {
		return m.Attraction
	}
	return nil
}

type DeleteAttractionRequest struct {
	AttractionId         string   `protobuf:"bytes,1,opt,name=attraction_id,json=attractionId,proto3" json:"attraction_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteAttractionRequest) Reset()         { *m = DeleteAttractionRequest{} }
func (m *DeleteAttractionRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteAttractionRequest) ProtoMessage()    {}
func (*DeleteAttractionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4f0074a4a4eb033, []int{9}
}
func (m *DeleteAttractionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteAttractionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteAttractionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteAttractionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteAttractionRequest.Merge(m, src)
}
func (m *DeleteAttractionRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteAttractionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteAttractionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteAttractionRequest proto.InternalMessageInfo

func (m *DeleteAttractionRequest) GetAttractionId() string {
	if m != nil {
		return m.AttractionId
	}
	return ""
}

type DeleteAttractionResponse struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteAttractionResponse) Reset()         { *m = DeleteAttractionResponse{} }
func (m *DeleteAttractionResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteAttractionResponse) ProtoMessage()    {}
func (*DeleteAttractionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4f0074a4a4eb033, []int{10}
}
func (m *DeleteAttractionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteAttractionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteAttractionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteAttractionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteAttractionResponse.Merge(m, src)
}
func (m *DeleteAttractionResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeleteAttractionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteAttractionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteAttractionResponse proto.InternalMessageInfo

func (m *DeleteAttractionResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type ListAttractionsByLocationRequest struct {
	Offset               uint64   `protobuf:"varint,1,opt,name=offset,proto3" json:"offset"`
	Limit                uint64   `protobuf:"varint,2,opt,name=limit,proto3" json:"limit"`
	Country              string   `protobuf:"bytes,3,opt,name=country,proto3" json:"country"`
	City                 string   `protobuf:"bytes,4,opt,name=city,proto3" json:"city"`
	StateProvince        string   `protobuf:"bytes,5,opt,name=state_province,json=stateProvince,proto3" json:"state_province"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListAttractionsByLocationRequest) Reset()         { *m = ListAttractionsByLocationRequest{} }
func (m *ListAttractionsByLocationRequest) String() string { return proto.CompactTextString(m) }
func (*ListAttractionsByLocationRequest) ProtoMessage()    {}
func (*ListAttractionsByLocationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4f0074a4a4eb033, []int{11}
}
func (m *ListAttractionsByLocationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListAttractionsByLocationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListAttractionsByLocationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListAttractionsByLocationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAttractionsByLocationRequest.Merge(m, src)
}
func (m *ListAttractionsByLocationRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListAttractionsByLocationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAttractionsByLocationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListAttractionsByLocationRequest proto.InternalMessageInfo

func (m *ListAttractionsByLocationRequest) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ListAttractionsByLocationRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListAttractionsByLocationRequest) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *ListAttractionsByLocationRequest) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *ListAttractionsByLocationRequest) GetStateProvince() string {
	if m != nil {
		return m.StateProvince
	}
	return ""
}

type ListAttractionsByLocationResponse struct {
	Attractions          []*Attraction `protobuf:"bytes,1,rep,name=Attractions,proto3" json:"Attractions"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ListAttractionsByLocationResponse) Reset()         { *m = ListAttractionsByLocationResponse{} }
func (m *ListAttractionsByLocationResponse) String() string { return proto.CompactTextString(m) }
func (*ListAttractionsByLocationResponse) ProtoMessage()    {}
func (*ListAttractionsByLocationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4f0074a4a4eb033, []int{12}
}
func (m *ListAttractionsByLocationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListAttractionsByLocationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListAttractionsByLocationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListAttractionsByLocationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAttractionsByLocationResponse.Merge(m, src)
}
func (m *ListAttractionsByLocationResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListAttractionsByLocationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAttractionsByLocationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListAttractionsByLocationResponse proto.InternalMessageInfo

func (m *ListAttractionsByLocationResponse) GetAttractions() []*Attraction {
	if m != nil {
		return m.Attractions
	}
	return nil
}

type Restaurant struct {
	RestaurantId         string    `protobuf:"bytes,1,opt,name=restaurant_id,json=restaurantId,proto3" json:"restaurant_id"`
	OwnerId              string    `protobuf:"bytes,2,opt,name=owner_id,json=ownerId,proto3" json:"owner_id"`
	RestaurantName       string    `protobuf:"bytes,3,opt,name=restaurant_name,json=restaurantName,proto3" json:"restaurant_name"`
	Description          string    `protobuf:"bytes,4,opt,name=description,proto3" json:"description"`
	Rating               float32   `protobuf:"fixed32,5,opt,name=rating,proto3" json:"rating"`
	OpeningHours         string    `protobuf:"bytes,6,opt,name=opening_hours,json=openingHours,proto3" json:"opening_hours"`
	ContactNumber        string    `protobuf:"bytes,7,opt,name=contact_number,json=contactNumber,proto3" json:"contact_number"`
	LicenceUrl           string    `protobuf:"bytes,8,opt,name=licence_url,json=licenceUrl,proto3" json:"licence_url"`
	WebsiteUrl           string    `protobuf:"bytes,9,opt,name=website_url,json=websiteUrl,proto3" json:"website_url"`
	Images               []*Image  `protobuf:"bytes,10,rep,name=images,proto3" json:"images"`
	Location             *Location `protobuf:"bytes,11,opt,name=location,proto3" json:"location"`
	CreatedAt            string    `protobuf:"bytes,12,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt            string    `protobuf:"bytes,13,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	DeletedAt            string    `protobuf:"bytes,14,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Restaurant) Reset()         { *m = Restaurant{} }
func (m *Restaurant) String() string { return proto.CompactTextString(m) }
func (*Restaurant) ProtoMessage()    {}
func (*Restaurant) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4f0074a4a4eb033, []int{13}
}
func (m *Restaurant) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Restaurant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Restaurant.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Restaurant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Restaurant.Merge(m, src)
}
func (m *Restaurant) XXX_Size() int {
	return m.Size()
}
func (m *Restaurant) XXX_DiscardUnknown() {
	xxx_messageInfo_Restaurant.DiscardUnknown(m)
}

var xxx_messageInfo_Restaurant proto.InternalMessageInfo

func (m *Restaurant) GetRestaurantId() string {
	if m != nil {
		return m.RestaurantId
	}
	return ""
}

func (m *Restaurant) GetOwnerId() string {
	if m != nil {
		return m.OwnerId
	}
	return ""
}

func (m *Restaurant) GetRestaurantName() string {
	if m != nil {
		return m.RestaurantName
	}
	return ""
}

func (m *Restaurant) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Restaurant) GetRating() float32 {
	if m != nil {
		return m.Rating
	}
	return 0
}

func (m *Restaurant) GetOpeningHours() string {
	if m != nil {
		return m.OpeningHours
	}
	return ""
}

func (m *Restaurant) GetContactNumber() string {
	if m != nil {
		return m.ContactNumber
	}
	return ""
}

func (m *Restaurant) GetLicenceUrl() string {
	if m != nil {
		return m.LicenceUrl
	}
	return ""
}

func (m *Restaurant) GetWebsiteUrl() string {
	if m != nil {
		return m.WebsiteUrl
	}
	return ""
}

func (m *Restaurant) GetImages() []*Image {
	if m != nil {
		return m.Images
	}
	return nil
}

func (m *Restaurant) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *Restaurant) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Restaurant) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *Restaurant) GetDeletedAt() string {
	if m != nil {
		return m.DeletedAt
	}
	return ""
}

type GetRestaurantRequest struct {
	RestaurantId         string   `protobuf:"bytes,1,opt,name=restaurant_id,json=restaurantId,proto3" json:"restaurant_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRestaurantRequest) Reset()         { *m = GetRestaurantRequest{} }
func (m *GetRestaurantRequest) String() string { return proto.CompactTextString(m) }
func (*GetRestaurantRequest) ProtoMessage()    {}
func (*GetRestaurantRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4f0074a4a4eb033, []int{14}
}
func (m *GetRestaurantRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRestaurantRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRestaurantRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRestaurantRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRestaurantRequest.Merge(m, src)
}
func (m *GetRestaurantRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetRestaurantRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRestaurantRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRestaurantRequest proto.InternalMessageInfo

func (m *GetRestaurantRequest) GetRestaurantId() string {
	if m != nil {
		return m.RestaurantId
	}
	return ""
}

type GetRestaurantResponse struct {
	Restaurant           *Restaurant `protobuf:"bytes,1,opt,name=restaurant,proto3" json:"restaurant"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GetRestaurantResponse) Reset()         { *m = GetRestaurantResponse{} }
func (m *GetRestaurantResponse) String() string { return proto.CompactTextString(m) }
func (*GetRestaurantResponse) ProtoMessage()    {}
func (*GetRestaurantResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4f0074a4a4eb033, []int{15}
}
func (m *GetRestaurantResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRestaurantResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRestaurantResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRestaurantResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRestaurantResponse.Merge(m, src)
}
func (m *GetRestaurantResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetRestaurantResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRestaurantResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetRestaurantResponse proto.InternalMessageInfo

func (m *GetRestaurantResponse) GetRestaurant() *Restaurant {
	if m != nil {
		return m.Restaurant
	}
	return nil
}

type ListRestaurantsRequest struct {
	Offset               int64    `protobuf:"varint,1,opt,name=offset,proto3" json:"offset"`
	Limit                int64    `protobuf:"varint,2,opt,name=limit,proto3" json:"limit"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListRestaurantsRequest) Reset()         { *m = ListRestaurantsRequest{} }
func (m *ListRestaurantsRequest) String() string { return proto.CompactTextString(m) }
func (*ListRestaurantsRequest) ProtoMessage()    {}
func (*ListRestaurantsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4f0074a4a4eb033, []int{16}
}
func (m *ListRestaurantsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListRestaurantsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListRestaurantsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListRestaurantsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRestaurantsRequest.Merge(m, src)
}
func (m *ListRestaurantsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListRestaurantsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRestaurantsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListRestaurantsRequest proto.InternalMessageInfo

func (m *ListRestaurantsRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ListRestaurantsRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type ListRestaurantsResponse struct {
	Restaurants          []*Restaurant `protobuf:"bytes,1,rep,name=restaurants,proto3" json:"restaurants"`
	Overall              uint64        `protobuf:"varint,2,opt,name=overall,proto3" json:"overall"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ListRestaurantsResponse) Reset()         { *m = ListRestaurantsResponse{} }
func (m *ListRestaurantsResponse) String() string { return proto.CompactTextString(m) }
func (*ListRestaurantsResponse) ProtoMessage()    {}
func (*ListRestaurantsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4f0074a4a4eb033, []int{17}
}
func (m *ListRestaurantsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListRestaurantsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListRestaurantsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListRestaurantsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRestaurantsResponse.Merge(m, src)
}
func (m *ListRestaurantsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListRestaurantsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRestaurantsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListRestaurantsResponse proto.InternalMessageInfo

func (m *ListRestaurantsResponse) GetRestaurants() []*Restaurant {
	if m != nil {
		return m.Restaurants
	}
	return nil
}

func (m *ListRestaurantsResponse) GetOverall() uint64 {
	if m != nil {
		return m.Overall
	}
	return 0
}

type UpdateRestaurantRequest struct {
	Restaurant           *Restaurant `protobuf:"bytes,1,opt,name=restaurant,proto3" json:"restaurant"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *UpdateRestaurantRequest) Reset()         { *m = UpdateRestaurantRequest{} }
func (m *UpdateRestaurantRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateRestaurantRequest) ProtoMessage()    {}
func (*UpdateRestaurantRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4f0074a4a4eb033, []int{18}
}
func (m *UpdateRestaurantRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateRestaurantRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateRestaurantRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateRestaurantRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateRestaurantRequest.Merge(m, src)
}
func (m *UpdateRestaurantRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateRestaurantRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateRestaurantRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateRestaurantRequest proto.InternalMessageInfo

func (m *UpdateRestaurantRequest) GetRestaurant() *Restaurant {
	if m != nil {
		return m.Restaurant
	}
	return nil
}

type UpdateRestaurantResponse struct {
	Restaurant           *Restaurant `protobuf:"bytes,1,opt,name=restaurant,proto3" json:"restaurant"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *UpdateRestaurantResponse) Reset()         { *m = UpdateRestaurantResponse{} }
func (m *UpdateRestaurantResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateRestaurantResponse) ProtoMessage()    {}
func (*UpdateRestaurantResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4f0074a4a4eb033, []int{19}
}
func (m *UpdateRestaurantResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateRestaurantResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateRestaurantResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateRestaurantResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateRestaurantResponse.Merge(m, src)
}
func (m *UpdateRestaurantResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateRestaurantResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateRestaurantResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateRestaurantResponse proto.InternalMessageInfo

func (m *UpdateRestaurantResponse) GetRestaurant() *Restaurant {
	if m != nil {
		return m.Restaurant
	}
	return nil
}

type DeleteRestaurantRequest struct {
	RestaurantId         string   `protobuf:"bytes,1,opt,name=restaurant_id,json=restaurantId,proto3" json:"restaurant_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteRestaurantRequest) Reset()         { *m = DeleteRestaurantRequest{} }
func (m *DeleteRestaurantRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteRestaurantRequest) ProtoMessage()    {}
func (*DeleteRestaurantRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4f0074a4a4eb033, []int{20}
}
func (m *DeleteRestaurantRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteRestaurantRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteRestaurantRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteRestaurantRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRestaurantRequest.Merge(m, src)
}
func (m *DeleteRestaurantRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteRestaurantRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRestaurantRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRestaurantRequest proto.InternalMessageInfo

func (m *DeleteRestaurantRequest) GetRestaurantId() string {
	if m != nil {
		return m.RestaurantId
	}
	return ""
}

type DeleteRestaurantResponse struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteRestaurantResponse) Reset()         { *m = DeleteRestaurantResponse{} }
func (m *DeleteRestaurantResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteRestaurantResponse) ProtoMessage()    {}
func (*DeleteRestaurantResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4f0074a4a4eb033, []int{21}
}
func (m *DeleteRestaurantResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteRestaurantResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteRestaurantResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteRestaurantResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRestaurantResponse.Merge(m, src)
}
func (m *DeleteRestaurantResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeleteRestaurantResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRestaurantResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRestaurantResponse proto.InternalMessageInfo

func (m *DeleteRestaurantResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type Hotel struct {
	HotelId              string    `protobuf:"bytes,1,opt,name=hotel_id,json=hotelId,proto3" json:"hotel_id"`
	OwnerId              string    `protobuf:"bytes,2,opt,name=owner_id,json=ownerId,proto3" json:"owner_id"`
	HotelName            string    `protobuf:"bytes,3,opt,name=hotel_name,json=hotelName,proto3" json:"hotel_name"`
	Description          string    `protobuf:"bytes,4,opt,name=description,proto3" json:"description"`
	Rating               float32   `protobuf:"fixed32,5,opt,name=rating,proto3" json:"rating"`
	ContactNumber        string    `protobuf:"bytes,6,opt,name=contact_number,json=contactNumber,proto3" json:"contact_number"`
	LicenceUrl           string    `protobuf:"bytes,7,opt,name=licence_url,json=licenceUrl,proto3" json:"licence_url"`
	WebsiteUrl           string    `protobuf:"bytes,8,opt,name=website_url,json=websiteUrl,proto3" json:"website_url"`
	Images               []*Image  `protobuf:"bytes,9,rep,name=images,proto3" json:"images"`
	Location             *Location `protobuf:"bytes,10,opt,name=location,proto3" json:"location"`
	CreatedAt            string    `protobuf:"bytes,11,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt            string    `protobuf:"bytes,12,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	DeletedAt            string    `protobuf:"bytes,13,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Hotel) Reset()         { *m = Hotel{} }
func (m *Hotel) String() string { return proto.CompactTextString(m) }
func (*Hotel) ProtoMessage()    {}
func (*Hotel) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4f0074a4a4eb033, []int{22}
}
func (m *Hotel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Hotel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Hotel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Hotel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Hotel.Merge(m, src)
}
func (m *Hotel) XXX_Size() int {
	return m.Size()
}
func (m *Hotel) XXX_DiscardUnknown() {
	xxx_messageInfo_Hotel.DiscardUnknown(m)
}

var xxx_messageInfo_Hotel proto.InternalMessageInfo

func (m *Hotel) GetHotelId() string {
	if m != nil {
		return m.HotelId
	}
	return ""
}

func (m *Hotel) GetOwnerId() string {
	if m != nil {
		return m.OwnerId
	}
	return ""
}

func (m *Hotel) GetHotelName() string {
	if m != nil {
		return m.HotelName
	}
	return ""
}

func (m *Hotel) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Hotel) GetRating() float32 {
	if m != nil {
		return m.Rating
	}
	return 0
}

func (m *Hotel) GetContactNumber() string {
	if m != nil {
		return m.ContactNumber
	}
	return ""
}

func (m *Hotel) GetLicenceUrl() string {
	if m != nil {
		return m.LicenceUrl
	}
	return ""
}

func (m *Hotel) GetWebsiteUrl() string {
	if m != nil {
		return m.WebsiteUrl
	}
	return ""
}

func (m *Hotel) GetImages() []*Image {
	if m != nil {
		return m.Images
	}
	return nil
}

func (m *Hotel) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *Hotel) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Hotel) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *Hotel) GetDeletedAt() string {
	if m != nil {
		return m.DeletedAt
	}
	return ""
}

type GetHotelRequest struct {
	HotelId              string   `protobuf:"bytes,1,opt,name=hotel_id,json=hotelId,proto3" json:"hotel_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetHotelRequest) Reset()         { *m = GetHotelRequest{} }
func (m *GetHotelRequest) String() string { return proto.CompactTextString(m) }
func (*GetHotelRequest) ProtoMessage()    {}
func (*GetHotelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4f0074a4a4eb033, []int{23}
}
func (m *GetHotelRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetHotelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetHotelRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetHotelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetHotelRequest.Merge(m, src)
}
func (m *GetHotelRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetHotelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetHotelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetHotelRequest proto.InternalMessageInfo

func (m *GetHotelRequest) GetHotelId() string {
	if m != nil {
		return m.HotelId
	}
	return ""
}

type GetHotelResponse struct {
	Hotel                *Hotel   `protobuf:"bytes,1,opt,name=hotel,proto3" json:"hotel"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetHotelResponse) Reset()         { *m = GetHotelResponse{} }
func (m *GetHotelResponse) String() string { return proto.CompactTextString(m) }
func (*GetHotelResponse) ProtoMessage()    {}
func (*GetHotelResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4f0074a4a4eb033, []int{24}
}
func (m *GetHotelResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetHotelResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetHotelResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetHotelResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetHotelResponse.Merge(m, src)
}
func (m *GetHotelResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetHotelResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetHotelResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetHotelResponse proto.InternalMessageInfo

func (m *GetHotelResponse) GetHotel() *Hotel {
	if m != nil {
		return m.Hotel
	}
	return nil
}

type ListHotelsRequest struct {
	Offset               int64    `protobuf:"varint,1,opt,name=offset,proto3" json:"offset"`
	Limit                int64    `protobuf:"varint,2,opt,name=limit,proto3" json:"limit"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListHotelsRequest) Reset()         { *m = ListHotelsRequest{} }
func (m *ListHotelsRequest) String() string { return proto.CompactTextString(m) }
func (*ListHotelsRequest) ProtoMessage()    {}
func (*ListHotelsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4f0074a4a4eb033, []int{25}
}
func (m *ListHotelsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListHotelsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListHotelsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListHotelsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListHotelsRequest.Merge(m, src)
}
func (m *ListHotelsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListHotelsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListHotelsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListHotelsRequest proto.InternalMessageInfo

func (m *ListHotelsRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ListHotelsRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type ListHotelsResponse struct {
	Hotels               []*Hotel `protobuf:"bytes,1,rep,name=hotels,proto3" json:"hotels"`
	Overall              uint64   `protobuf:"varint,2,opt,name=overall,proto3" json:"overall"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListHotelsResponse) Reset()         { *m = ListHotelsResponse{} }
func (m *ListHotelsResponse) String() string { return proto.CompactTextString(m) }
func (*ListHotelsResponse) ProtoMessage()    {}
func (*ListHotelsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4f0074a4a4eb033, []int{26}
}
func (m *ListHotelsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListHotelsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListHotelsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListHotelsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListHotelsResponse.Merge(m, src)
}
func (m *ListHotelsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListHotelsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListHotelsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListHotelsResponse proto.InternalMessageInfo

func (m *ListHotelsResponse) GetHotels() []*Hotel {
	if m != nil {
		return m.Hotels
	}
	return nil
}

func (m *ListHotelsResponse) GetOverall() uint64 {
	if m != nil {
		return m.Overall
	}
	return 0
}

type UpdateHotelRequest struct {
	Hotel                *Hotel   `protobuf:"bytes,1,opt,name=hotel,proto3" json:"hotel"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateHotelRequest) Reset()         { *m = UpdateHotelRequest{} }
func (m *UpdateHotelRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateHotelRequest) ProtoMessage()    {}
func (*UpdateHotelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4f0074a4a4eb033, []int{27}
}
func (m *UpdateHotelRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateHotelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateHotelRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateHotelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateHotelRequest.Merge(m, src)
}
func (m *UpdateHotelRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateHotelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateHotelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateHotelRequest proto.InternalMessageInfo

func (m *UpdateHotelRequest) GetHotel() *Hotel {
	if m != nil {
		return m.Hotel
	}
	return nil
}

type UpdateHotelResponse struct {
	Hotel                *Hotel   `protobuf:"bytes,1,opt,name=hotel,proto3" json:"hotel"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateHotelResponse) Reset()         { *m = UpdateHotelResponse{} }
func (m *UpdateHotelResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateHotelResponse) ProtoMessage()    {}
func (*UpdateHotelResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4f0074a4a4eb033, []int{28}
}
func (m *UpdateHotelResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateHotelResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateHotelResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateHotelResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateHotelResponse.Merge(m, src)
}
func (m *UpdateHotelResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateHotelResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateHotelResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateHotelResponse proto.InternalMessageInfo

func (m *UpdateHotelResponse) GetHotel() *Hotel {
	if m != nil {
		return m.Hotel
	}
	return nil
}

type DeleteHotelRequest struct {
	HotelId              string   `protobuf:"bytes,1,opt,name=hotel_id,json=hotelId,proto3" json:"hotel_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteHotelRequest) Reset()         { *m = DeleteHotelRequest{} }
func (m *DeleteHotelRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteHotelRequest) ProtoMessage()    {}
func (*DeleteHotelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4f0074a4a4eb033, []int{29}
}
func (m *DeleteHotelRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteHotelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteHotelRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteHotelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteHotelRequest.Merge(m, src)
}
func (m *DeleteHotelRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteHotelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteHotelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteHotelRequest proto.InternalMessageInfo

func (m *DeleteHotelRequest) GetHotelId() string {
	if m != nil {
		return m.HotelId
	}
	return ""
}

type DeleteHotelResponse struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteHotelResponse) Reset()         { *m = DeleteHotelResponse{} }
func (m *DeleteHotelResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteHotelResponse) ProtoMessage()    {}
func (*DeleteHotelResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4f0074a4a4eb033, []int{30}
}
func (m *DeleteHotelResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteHotelResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteHotelResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteHotelResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteHotelResponse.Merge(m, src)
}
func (m *DeleteHotelResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeleteHotelResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteHotelResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteHotelResponse proto.InternalMessageInfo

func (m *DeleteHotelResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type Favourite struct {
	FavouriteId          string   `protobuf:"bytes,1,opt,name=favourite_id,json=favouriteId,proto3" json:"favourite_id"`
	EstablishmentId      string   `protobuf:"bytes,2,opt,name=establishment_id,json=establishmentId,proto3" json:"establishment_id"`
	UserId               string   `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id"`
	CreatedAt            string   `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt            string   `protobuf:"bytes,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	DeletedAt            string   `protobuf:"bytes,6,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Favourite) Reset()         { *m = Favourite{} }
func (m *Favourite) String() string { return proto.CompactTextString(m) }
func (*Favourite) ProtoMessage()    {}
func (*Favourite) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4f0074a4a4eb033, []int{31}
}
func (m *Favourite) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Favourite) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Favourite.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Favourite) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Favourite.Merge(m, src)
}
func (m *Favourite) XXX_Size() int {
	return m.Size()
}
func (m *Favourite) XXX_DiscardUnknown() {
	xxx_messageInfo_Favourite.DiscardUnknown(m)
}

var xxx_messageInfo_Favourite proto.InternalMessageInfo

func (m *Favourite) GetFavouriteId() string {
	if m != nil {
		return m.FavouriteId
	}
	return ""
}

func (m *Favourite) GetEstablishmentId() string {
	if m != nil {
		return m.EstablishmentId
	}
	return ""
}

func (m *Favourite) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *Favourite) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Favourite) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *Favourite) GetDeletedAt() string {
	if m != nil {
		return m.DeletedAt
	}
	return ""
}

type AddToFavouritesRequest struct {
	Favourite            *Favourite `protobuf:"bytes,1,opt,name=favourite,proto3" json:"favourite"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *AddToFavouritesRequest) Reset()         { *m = AddToFavouritesRequest{} }
func (m *AddToFavouritesRequest) String() string { return proto.CompactTextString(m) }
func (*AddToFavouritesRequest) ProtoMessage()    {}
func (*AddToFavouritesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4f0074a4a4eb033, []int{32}
}
func (m *AddToFavouritesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddToFavouritesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddToFavouritesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddToFavouritesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddToFavouritesRequest.Merge(m, src)
}
func (m *AddToFavouritesRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddToFavouritesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddToFavouritesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddToFavouritesRequest proto.InternalMessageInfo

func (m *AddToFavouritesRequest) GetFavourite() *Favourite {
	if m != nil {
		return m.Favourite
	}
	return nil
}

type AddToFavouritesResponse struct {
	Favourite            *Favourite `protobuf:"bytes,1,opt,name=favourite,proto3" json:"favourite"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *AddToFavouritesResponse) Reset()         { *m = AddToFavouritesResponse{} }
func (m *AddToFavouritesResponse) String() string { return proto.CompactTextString(m) }
func (*AddToFavouritesResponse) ProtoMessage()    {}
func (*AddToFavouritesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4f0074a4a4eb033, []int{33}
}
func (m *AddToFavouritesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddToFavouritesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddToFavouritesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddToFavouritesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddToFavouritesResponse.Merge(m, src)
}
func (m *AddToFavouritesResponse) XXX_Size() int {
	return m.Size()
}
func (m *AddToFavouritesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddToFavouritesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddToFavouritesResponse proto.InternalMessageInfo

func (m *AddToFavouritesResponse) GetFavourite() *Favourite {
	if m != nil {
		return m.Favourite
	}
	return nil
}

type RemoveFromFavouritesRequest struct {
	FavouriteId          string   `protobuf:"bytes,1,opt,name=favourite_id,json=favouriteId,proto3" json:"favourite_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoveFromFavouritesRequest) Reset()         { *m = RemoveFromFavouritesRequest{} }
func (m *RemoveFromFavouritesRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveFromFavouritesRequest) ProtoMessage()    {}
func (*RemoveFromFavouritesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4f0074a4a4eb033, []int{34}
}
func (m *RemoveFromFavouritesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveFromFavouritesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveFromFavouritesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveFromFavouritesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveFromFavouritesRequest.Merge(m, src)
}
func (m *RemoveFromFavouritesRequest) XXX_Size() int {
	return m.Size()
}
func (m *RemoveFromFavouritesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveFromFavouritesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveFromFavouritesRequest proto.InternalMessageInfo

func (m *RemoveFromFavouritesRequest) GetFavouriteId() string {
	if m != nil {
		return m.FavouriteId
	}
	return ""
}

type RemoveFromFavouritesResponse struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoveFromFavouritesResponse) Reset()         { *m = RemoveFromFavouritesResponse{} }
func (m *RemoveFromFavouritesResponse) String() string { return proto.CompactTextString(m) }
func (*RemoveFromFavouritesResponse) ProtoMessage()    {}
func (*RemoveFromFavouritesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4f0074a4a4eb033, []int{35}
}
func (m *RemoveFromFavouritesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveFromFavouritesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveFromFavouritesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveFromFavouritesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveFromFavouritesResponse.Merge(m, src)
}
func (m *RemoveFromFavouritesResponse) XXX_Size() int {
	return m.Size()
}
func (m *RemoveFromFavouritesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveFromFavouritesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveFromFavouritesResponse proto.InternalMessageInfo

func (m *RemoveFromFavouritesResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type ListFavouritesByUserIdRequest struct {
	UserId               string   `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListFavouritesByUserIdRequest) Reset()         { *m = ListFavouritesByUserIdRequest{} }
func (m *ListFavouritesByUserIdRequest) String() string { return proto.CompactTextString(m) }
func (*ListFavouritesByUserIdRequest) ProtoMessage()    {}
func (*ListFavouritesByUserIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4f0074a4a4eb033, []int{36}
}
func (m *ListFavouritesByUserIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListFavouritesByUserIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListFavouritesByUserIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListFavouritesByUserIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListFavouritesByUserIdRequest.Merge(m, src)
}
func (m *ListFavouritesByUserIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListFavouritesByUserIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListFavouritesByUserIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListFavouritesByUserIdRequest proto.InternalMessageInfo

func (m *ListFavouritesByUserIdRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type ListFavouritesByUserIdResponse struct {
	Favourites           []*Favourite `protobuf:"bytes,1,rep,name=favourites,proto3" json:"favourites"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ListFavouritesByUserIdResponse) Reset()         { *m = ListFavouritesByUserIdResponse{} }
func (m *ListFavouritesByUserIdResponse) String() string { return proto.CompactTextString(m) }
func (*ListFavouritesByUserIdResponse) ProtoMessage()    {}
func (*ListFavouritesByUserIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4f0074a4a4eb033, []int{37}
}
func (m *ListFavouritesByUserIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListFavouritesByUserIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListFavouritesByUserIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListFavouritesByUserIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListFavouritesByUserIdResponse.Merge(m, src)
}
func (m *ListFavouritesByUserIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListFavouritesByUserIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListFavouritesByUserIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListFavouritesByUserIdResponse proto.InternalMessageInfo

func (m *ListFavouritesByUserIdResponse) GetFavourites() []*Favourite {
	if m != nil {
		return m.Favourites
	}
	return nil
}

type Review struct {
	ReviewId             string   `protobuf:"bytes,1,opt,name=review_id,json=reviewId,proto3" json:"review_id"`
	EstablishmentId      string   `protobuf:"bytes,2,opt,name=establishment_id,json=establishmentId,proto3" json:"establishment_id"`
	UserId               string   `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id"`
	Rating               float32  `protobuf:"fixed32,4,opt,name=rating,proto3" json:"rating"`
	Comment              string   `protobuf:"bytes,5,opt,name=comment,proto3" json:"comment"`
	CreatedAt            string   `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt            string   `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	DeletedAt            string   `protobuf:"bytes,8,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Review) Reset()         { *m = Review{} }
func (m *Review) String() string { return proto.CompactTextString(m) }
func (*Review) ProtoMessage()    {}
func (*Review) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4f0074a4a4eb033, []int{38}
}
func (m *Review) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Review) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Review.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Review) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Review.Merge(m, src)
}
func (m *Review) XXX_Size() int {
	return m.Size()
}
func (m *Review) XXX_DiscardUnknown() {
	xxx_messageInfo_Review.DiscardUnknown(m)
}

var xxx_messageInfo_Review proto.InternalMessageInfo

func (m *Review) GetReviewId() string {
	if m != nil {
		return m.ReviewId
	}
	return ""
}

func (m *Review) GetEstablishmentId() string {
	if m != nil {
		return m.EstablishmentId
	}
	return ""
}

func (m *Review) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *Review) GetRating() float32 {
	if m != nil {
		return m.Rating
	}
	return 0
}

func (m *Review) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *Review) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Review) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *Review) GetDeletedAt() string {
	if m != nil {
		return m.DeletedAt
	}
	return ""
}

type CreateReviewRequest struct {
	Review               *Review  `protobuf:"bytes,1,opt,name=review,proto3" json:"review"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateReviewRequest) Reset()         { *m = CreateReviewRequest{} }
func (m *CreateReviewRequest) String() string { return proto.CompactTextString(m) }
func (*CreateReviewRequest) ProtoMessage()    {}
func (*CreateReviewRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4f0074a4a4eb033, []int{39}
}
func (m *CreateReviewRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateReviewRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateReviewRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateReviewRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateReviewRequest.Merge(m, src)
}
func (m *CreateReviewRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateReviewRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateReviewRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateReviewRequest proto.InternalMessageInfo

func (m *CreateReviewRequest) GetReview() *Review {
	if m != nil {
		return m.Review
	}
	return nil
}

type CreateReviewResponse struct {
	Review               *Review  `protobuf:"bytes,1,opt,name=review,proto3" json:"review"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateReviewResponse) Reset()         { *m = CreateReviewResponse{} }
func (m *CreateReviewResponse) String() string { return proto.CompactTextString(m) }
func (*CreateReviewResponse) ProtoMessage()    {}
func (*CreateReviewResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4f0074a4a4eb033, []int{40}
}
func (m *CreateReviewResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateReviewResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateReviewResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateReviewResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateReviewResponse.Merge(m, src)
}
func (m *CreateReviewResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateReviewResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateReviewResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateReviewResponse proto.InternalMessageInfo

func (m *CreateReviewResponse) GetReview() *Review {
	if m != nil {
		return m.Review
	}
	return nil
}

type ListReviewsRequest struct {
	EstablishmentId      string   `protobuf:"bytes,1,opt,name=establishment_id,json=establishmentId,proto3" json:"establishment_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListReviewsRequest) Reset()         { *m = ListReviewsRequest{} }
func (m *ListReviewsRequest) String() string { return proto.CompactTextString(m) }
func (*ListReviewsRequest) ProtoMessage()    {}
func (*ListReviewsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4f0074a4a4eb033, []int{41}
}
func (m *ListReviewsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListReviewsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListReviewsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListReviewsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListReviewsRequest.Merge(m, src)
}
func (m *ListReviewsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListReviewsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListReviewsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListReviewsRequest proto.InternalMessageInfo

func (m *ListReviewsRequest) GetEstablishmentId() string {
	if m != nil {
		return m.EstablishmentId
	}
	return ""
}

type ListReviewsResponse struct {
	Reviews              []*Review `protobuf:"bytes,1,rep,name=reviews,proto3" json:"reviews"`
	Count                uint64    `protobuf:"varint,2,opt,name=count,proto3" json:"count"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ListReviewsResponse) Reset()         { *m = ListReviewsResponse{} }
func (m *ListReviewsResponse) String() string { return proto.CompactTextString(m) }
func (*ListReviewsResponse) ProtoMessage()    {}
func (*ListReviewsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4f0074a4a4eb033, []int{42}
}
func (m *ListReviewsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListReviewsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListReviewsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListReviewsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListReviewsResponse.Merge(m, src)
}
func (m *ListReviewsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListReviewsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListReviewsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListReviewsResponse proto.InternalMessageInfo

func (m *ListReviewsResponse) GetReviews() []*Review {
	if m != nil {
		return m.Reviews
	}
	return nil
}

func (m *ListReviewsResponse) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type DeleteReviewRequest struct {
	ReviewId             string   `protobuf:"bytes,1,opt,name=review_id,json=reviewId,proto3" json:"review_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteReviewRequest) Reset()         { *m = DeleteReviewRequest{} }
func (m *DeleteReviewRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteReviewRequest) ProtoMessage()    {}
func (*DeleteReviewRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4f0074a4a4eb033, []int{43}
}
func (m *DeleteReviewRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteReviewRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteReviewRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteReviewRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteReviewRequest.Merge(m, src)
}
func (m *DeleteReviewRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteReviewRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteReviewRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteReviewRequest proto.InternalMessageInfo

func (m *DeleteReviewRequest) GetReviewId() string {
	if m != nil {
		return m.ReviewId
	}
	return ""
}

type DeleteReviewResponse struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteReviewResponse) Reset()         { *m = DeleteReviewResponse{} }
func (m *DeleteReviewResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteReviewResponse) ProtoMessage()    {}
func (*DeleteReviewResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4f0074a4a4eb033, []int{44}
}
func (m *DeleteReviewResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteReviewResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteReviewResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteReviewResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteReviewResponse.Merge(m, src)
}
func (m *DeleteReviewResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeleteReviewResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteReviewResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteReviewResponse proto.InternalMessageInfo

func (m *DeleteReviewResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*Image)(nil), "establishment_service.Image")
	proto.RegisterType((*Location)(nil), "establishment_service.Location")
	proto.RegisterType((*Attraction)(nil), "establishment_service.Attraction")
	proto.RegisterType((*GetAttractionRequest)(nil), "establishment_service.GetAttractionRequest")
	proto.RegisterType((*GetAttractionResponse)(nil), "establishment_service.GetAttractionResponse")
	proto.RegisterType((*ListAttractionsRequest)(nil), "establishment_service.ListAttractionsRequest")
	proto.RegisterType((*ListAttractionsResponse)(nil), "establishment_service.ListAttractionsResponse")
	proto.RegisterType((*UpdateAttractionRequest)(nil), "establishment_service.UpdateAttractionRequest")
	proto.RegisterType((*UpdateAttractionResponse)(nil), "establishment_service.UpdateAttractionResponse")
	proto.RegisterType((*DeleteAttractionRequest)(nil), "establishment_service.DeleteAttractionRequest")
	proto.RegisterType((*DeleteAttractionResponse)(nil), "establishment_service.DeleteAttractionResponse")
	proto.RegisterType((*ListAttractionsByLocationRequest)(nil), "establishment_service.ListAttractionsByLocationRequest")
	proto.RegisterType((*ListAttractionsByLocationResponse)(nil), "establishment_service.ListAttractionsByLocationResponse")
	proto.RegisterType((*Restaurant)(nil), "establishment_service.Restaurant")
	proto.RegisterType((*GetRestaurantRequest)(nil), "establishment_service.GetRestaurantRequest")
	proto.RegisterType((*GetRestaurantResponse)(nil), "establishment_service.GetRestaurantResponse")
	proto.RegisterType((*ListRestaurantsRequest)(nil), "establishment_service.ListRestaurantsRequest")
	proto.RegisterType((*ListRestaurantsResponse)(nil), "establishment_service.ListRestaurantsResponse")
	proto.RegisterType((*UpdateRestaurantRequest)(nil), "establishment_service.UpdateRestaurantRequest")
	proto.RegisterType((*UpdateRestaurantResponse)(nil), "establishment_service.UpdateRestaurantResponse")
	proto.RegisterType((*DeleteRestaurantRequest)(nil), "establishment_service.DeleteRestaurantRequest")
	proto.RegisterType((*DeleteRestaurantResponse)(nil), "establishment_service.DeleteRestaurantResponse")
	proto.RegisterType((*Hotel)(nil), "establishment_service.Hotel")
	proto.RegisterType((*GetHotelRequest)(nil), "establishment_service.GetHotelRequest")
	proto.RegisterType((*GetHotelResponse)(nil), "establishment_service.GetHotelResponse")
	proto.RegisterType((*ListHotelsRequest)(nil), "establishment_service.ListHotelsRequest")
	proto.RegisterType((*ListHotelsResponse)(nil), "establishment_service.ListHotelsResponse")
	proto.RegisterType((*UpdateHotelRequest)(nil), "establishment_service.UpdateHotelRequest")
	proto.RegisterType((*UpdateHotelResponse)(nil), "establishment_service.UpdateHotelResponse")
	proto.RegisterType((*DeleteHotelRequest)(nil), "establishment_service.DeleteHotelRequest")
	proto.RegisterType((*DeleteHotelResponse)(nil), "establishment_service.DeleteHotelResponse")
	proto.RegisterType((*Favourite)(nil), "establishment_service.Favourite")
	proto.RegisterType((*AddToFavouritesRequest)(nil), "establishment_service.AddToFavouritesRequest")
	proto.RegisterType((*AddToFavouritesResponse)(nil), "establishment_service.AddToFavouritesResponse")
	proto.RegisterType((*RemoveFromFavouritesRequest)(nil), "establishment_service.RemoveFromFavouritesRequest")
	proto.RegisterType((*RemoveFromFavouritesResponse)(nil), "establishment_service.RemoveFromFavouritesResponse")
	proto.RegisterType((*ListFavouritesByUserIdRequest)(nil), "establishment_service.ListFavouritesByUserIdRequest")
	proto.RegisterType((*ListFavouritesByUserIdResponse)(nil), "establishment_service.ListFavouritesByUserIdResponse")
	proto.RegisterType((*Review)(nil), "establishment_service.Review")
	proto.RegisterType((*CreateReviewRequest)(nil), "establishment_service.CreateReviewRequest")
	proto.RegisterType((*CreateReviewResponse)(nil), "establishment_service.CreateReviewResponse")
	proto.RegisterType((*ListReviewsRequest)(nil), "establishment_service.ListReviewsRequest")
	proto.RegisterType((*ListReviewsResponse)(nil), "establishment_service.ListReviewsResponse")
	proto.RegisterType((*DeleteReviewRequest)(nil), "establishment_service.DeleteReviewRequest")
	proto.RegisterType((*DeleteReviewResponse)(nil), "establishment_service.DeleteReviewResponse")
}

func init() {
	proto.RegisterFile("establishment-proto/establishment.proto", fileDescriptor_f4f0074a4a4eb033)
}

var fileDescriptor_f4f0074a4a4eb033 = []byte{
	// 1650 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x59, 0xcd, 0x6e, 0xdb, 0xc6,
	0x13, 0xff, 0x33, 0xfa, 0x1e, 0x49, 0xb1, 0xff, 0x6b, 0xc7, 0x56, 0x94, 0xd8, 0x71, 0x18, 0xb4,
	0x89, 0xf3, 0x61, 0x17, 0x8a, 0x83, 0x04, 0x08, 0x90, 0x46, 0x49, 0xeb, 0x44, 0x40, 0x1a, 0x14,
	0x6a, 0x03, 0xa4, 0x5f, 0x30, 0x68, 0x72, 0x63, 0xb3, 0x90, 0x48, 0x95, 0x5c, 0x39, 0xf5, 0xa9,
	0xa7, 0x1e, 0xdb, 0x73, 0x5f, 0xa0, 0xcf, 0xd2, 0xde, 0xda, 0x07, 0xe8, 0xa1, 0x70, 0x2f, 0x7d,
	0x81, 0x02, 0x3d, 0x16, 0xdc, 0x5d, 0x72, 0x97, 0x12, 0x97, 0xa4, 0x65, 0x07, 0xbd, 0xf4, 0xc6,
	0x9d, 0x9d, 0xd9, 0x9d, 0x9d, 0xf9, 0xed, 0x4f, 0x33, 0x2b, 0xb8, 0x8a, 0x7d, 0x62, 0xec, 0x0e,
	0x6c, 0x7f, 0x7f, 0x88, 0x1d, 0x72, 0x6b, 0xe4, 0xb9, 0xc4, 0xdd, 0x8c, 0xc9, 0x36, 0xa8, 0x0c,
	0x9d, 0x8b, 0x09, 0x77, 0x7c, 0xec, 0x1d, 0xd8, 0x26, 0xd6, 0x7f, 0xd2, 0xa0, 0xd4, 0x1b, 0x1a,
	0x7b, 0x18, 0x9d, 0x87, 0xaa, 0x1d, 0x7c, 0xec, 0xd8, 0x56, 0x4b, 0x5b, 0xd3, 0xae, 0xd5, 0xfa,
	0x15, 0x3a, 0xee, 0x59, 0x68, 0x1d, 0xe6, 0xe3, 0xd6, 0xb6, 0xd5, 0x3a, 0x43, 0x55, 0xe6, 0x62,
	0xf2, 0x9e, 0x85, 0x2e, 0x40, 0x8d, 0xad, 0x32, 0xf6, 0x06, 0xad, 0x02, 0xd5, 0x61, 0xcb, 0xbe,
	0xf0, 0x06, 0x68, 0x05, 0xc0, 0xf4, 0xb0, 0x41, 0xb0, 0xb5, 0x63, 0x90, 0x56, 0x91, 0xce, 0xd6,
	0xb8, 0xa4, 0x4b, 0x82, 0xe9, 0xf1, 0xc8, 0x0a, 0xa7, 0x4b, 0x6c, 0x9a, 0x4b, 0xd8, 0xb4, 0x85,
	0x07, 0x98, 0x4f, 0x97, 0xd9, 0x34, 0x97, 0x74, 0x89, 0xfe, 0xdb, 0x19, 0xa8, 0x3e, 0x73, 0x4d,
	0x83, 0xd8, 0xae, 0x83, 0x2e, 0x41, 0x7d, 0xc0, 0xbf, 0xc5, 0x79, 0x20, 0x14, 0x1d, 0xef, 0x48,
	0x2d, 0xa8, 0x18, 0x96, 0xe5, 0x61, 0xdf, 0xe7, 0x07, 0x0a, 0x87, 0xa8, 0x0d, 0xd5, 0x81, 0x41,
	0x6c, 0x32, 0xb6, 0x30, 0x3d, 0xcd, 0x99, 0x7e, 0x34, 0x46, 0x17, 0xa1, 0x36, 0x70, 0x9d, 0x3d,
	0x36, 0x59, 0xa2, 0x93, 0x42, 0x10, 0xac, 0x69, 0xba, 0x63, 0x87, 0x78, 0x87, 0xfc, 0x20, 0xe1,
	0x10, 0x21, 0x28, 0x9a, 0x36, 0x39, 0x6c, 0x55, 0xa8, 0x98, 0x7e, 0xa3, 0xb7, 0xe0, 0xac, 0x4f,
	0x0c, 0x82, 0x77, 0x46, 0x9e, 0x7b, 0x60, 0x3b, 0x26, 0x6e, 0x55, 0xe9, 0x6c, 0x93, 0x4a, 0x3f,
	0xe4, 0xc2, 0x89, 0xf0, 0xd6, 0xd2, 0xc3, 0x0b, 0xe9, 0xe1, 0xad, 0x4f, 0x86, 0xf7, 0xcf, 0x02,
	0x40, 0x97, 0x10, 0xcf, 0x30, 0x69, 0x80, 0xaf, 0x40, 0xd3, 0x88, 0x46, 0x22, 0xc4, 0x0d, 0x21,
	0xec, 0x59, 0x01, 0xa4, 0xdc, 0xd7, 0x0e, 0xf6, 0x44, 0x70, 0x2b, 0x74, 0xdc, 0xb3, 0xd0, 0x55,
	0x98, 0x93, 0xec, 0x1d, 0x63, 0x88, 0x79, 0x70, 0xcf, 0x0a, 0xf1, 0x73, 0x63, 0x88, 0xd1, 0x1a,
	0xd4, 0x2d, 0xec, 0x9b, 0x9e, 0x3d, 0x0a, 0x44, 0x1c, 0x34, 0xb2, 0x08, 0x2d, 0x41, 0xd9, 0x33,
	0x88, 0xed, 0xec, 0xf1, 0x30, 0xf3, 0x51, 0x10, 0x35, 0xd3, 0x75, 0x88, 0x61, 0x92, 0x1d, 0x67,
	0x3c, 0xdc, 0xc5, 0x1e, 0x0f, 0x75, 0x93, 0x4b, 0x9f, 0x53, 0x21, 0x85, 0x8a, 0x6d, 0x62, 0xc7,
	0x64, 0x98, 0xad, 0x70, 0xa8, 0x30, 0x51, 0x80, 0xda, 0x4b, 0x50, 0x7f, 0x8d, 0x77, 0x7d, 0x9b,
	0x30, 0x05, 0x16, 0x7a, 0xe0, 0xa2, 0x40, 0x61, 0x0b, 0xca, 0x14, 0xe2, 0x7e, 0xab, 0xb6, 0x56,
	0xb8, 0x56, 0xef, 0x5c, 0xdc, 0x48, 0xbc, 0x6b, 0x1b, 0xf4, 0x9e, 0xf5, 0xb9, 0x2e, 0xba, 0x0f,
	0xd5, 0x10, 0x8f, 0x34, 0x19, 0xf5, 0xce, 0x25, 0x85, 0x5d, 0x88, 0xea, 0x7e, 0x64, 0x30, 0x91,
	0xea, 0x7a, 0x7a, 0xaa, 0x1b, 0xe9, 0xa9, 0x6e, 0x4e, 0xa6, 0xfa, 0x3e, 0x2c, 0x3e, 0xc1, 0x44,
	0x24, 0xbb, 0x8f, 0xbf, 0x1a, 0x63, 0x9f, 0xe4, 0xca, 0xb9, 0xfe, 0x29, 0x9c, 0x9b, 0x30, 0xf6,
	0x47, 0xae, 0xe3, 0x63, 0xd4, 0x05, 0x10, 0x8a, 0xd4, 0xb4, 0xde, 0xb9, 0xac, 0x38, 0xb1, 0x64,
	0x2e, 0x19, 0xe9, 0xdb, 0xb0, 0xf4, 0xcc, 0xf6, 0xa5, 0xc5, 0xfd, 0xd0, 0xb5, 0x25, 0x28, 0xbb,
	0xaf, 0x5e, 0xf9, 0x98, 0xd0, 0x85, 0x0b, 0x7d, 0x3e, 0x42, 0x8b, 0x50, 0x1a, 0xd8, 0x43, 0x9b,
	0x50, 0xf8, 0x15, 0xfa, 0x6c, 0xa0, 0x7f, 0x0d, 0xcb, 0x53, 0xeb, 0x70, 0x2f, 0x1f, 0x43, 0x5d,
	0x6c, 0xe8, 0xb7, 0x34, 0x9a, 0xd0, 0x1c, 0x6e, 0xca, 0x56, 0xc1, 0xed, 0x76, 0x0f, 0xb0, 0x67,
	0x0c, 0x06, 0x74, 0xdf, 0x62, 0x3f, 0x1c, 0xea, 0x9f, 0xc3, 0xf2, 0x0b, 0x9a, 0x86, 0xe9, 0xe8,
	0x9e, 0x42, 0x7c, 0xbe, 0x80, 0xd6, 0xf4, 0xea, 0xa7, 0x17, 0xfe, 0x07, 0xb0, 0xfc, 0x1e, 0x05,
	0xc9, 0x8c, 0xd0, 0xd8, 0x82, 0xd6, 0xb4, 0x3d, 0x77, 0xaf, 0x05, 0x15, 0x7f, 0x6c, 0x9a, 0x01,
	0xc9, 0x06, 0xa6, 0xd5, 0x7e, 0x38, 0xd4, 0x7f, 0xd4, 0x60, 0x6d, 0x22, 0x5b, 0x8f, 0x0e, 0xa3,
	0x2b, 0x91, 0x98, 0xff, 0x62, 0x72, 0xfe, 0x8b, 0x3c, 0xff, 0x32, 0xfb, 0x16, 0x92, 0xd9, 0xb7,
	0x98, 0xca, 0xbe, 0xa5, 0x04, 0xf6, 0xd5, 0xf7, 0xe1, 0x72, 0x8a, 0x9b, 0x02, 0x5e, 0xdd, 0x99,
	0xe0, 0x25, 0x59, 0xe9, 0xdf, 0x15, 0x01, 0xfa, 0x81, 0xc9, 0xd8, 0x33, 0x1c, 0x1a, 0x7b, 0x2f,
	0x1a, 0x49, 0xb1, 0x17, 0xc2, 0x4c, 0x2a, 0x96, 0xec, 0x65, 0x2a, 0x16, 0xe2, 0x13, 0x52, 0xf1,
	0x15, 0x68, 0xba, 0x23, 0xec, 0xd8, 0xce, 0xde, 0xce, 0xbe, 0x3b, 0xf6, 0x7c, 0xce, 0xc4, 0x0d,
	0x2e, 0x7c, 0x1a, 0xc8, 0x12, 0xf8, 0xba, 0x92, 0x83, 0xaf, 0xab, 0x59, 0x7c, 0x5d, 0x4b, 0xe1,
	0x6b, 0x98, 0x91, 0xaf, 0xeb, 0x27, 0xe3, 0xeb, 0x46, 0x3a, 0x5f, 0x37, 0xd3, 0xf9, 0xfa, 0x6c,
	0x32, 0x5f, 0x0b, 0x44, 0x48, 0x97, 0x32, 0x13, 0x18, 0x9c, 0xaf, 0x65, 0x63, 0x41, 0x18, 0x42,
	0x31, 0x83, 0x30, 0x24, 0x73, 0xc9, 0x28, 0xe4, 0x6b, 0x31, 0x7b, 0x32, 0xbe, 0x8e, 0xad, 0x23,
	0x2e, 0x94, 0xd8, 0x30, 0xeb, 0x42, 0x49, 0x6e, 0xca, 0x56, 0x79, 0xf8, 0x7a, 0x3a, 0xba, 0xa7,
	0x10, 0x9f, 0x88, 0xaf, 0xdf, 0x4c, 0xf8, 0x23, 0xbe, 0x9e, 0x11, 0x1a, 0x11, 0x5f, 0x27, 0xb8,
	0xa7, 0xe6, 0xeb, 0x5f, 0x0a, 0x50, 0x7a, 0xea, 0x12, 0x3c, 0x08, 0x38, 0x67, 0x3f, 0xf8, 0x90,
	0x3a, 0x0a, 0x3a, 0x4e, 0xa7, 0xa3, 0x15, 0x00, 0x66, 0x25, 0x31, 0x51, 0x8d, 0x4a, 0xfe, 0xab,
	0x07, 0xff, 0x9d, 0x7a, 0xf0, 0x26, 0xcc, 0x3d, 0xc1, 0x84, 0xe6, 0x34, 0xc4, 0x8f, 0x3a, 0xb5,
	0xfa, 0x36, 0xcc, 0x0b, 0x6d, 0x8e, 0x96, 0x0e, 0x94, 0xe8, 0x34, 0xc7, 0xb1, 0x2a, 0x20, 0xcc,
	0x88, 0xa9, 0xea, 0x5d, 0xf8, 0x7f, 0x70, 0xe9, 0xa9, 0x6c, 0x46, 0xde, 0xb0, 0x00, 0xc9, 0x4b,
	0x70, 0x67, 0xb6, 0xa0, 0x4c, 0x77, 0x08, 0xd9, 0x22, 0xdd, 0x1b, 0xae, 0x9b, 0xc2, 0x11, 0x4f,
	0x01, 0xb1, 0x5b, 0x1c, 0x8b, 0xd0, 0x2c, 0x47, 0xee, 0xc1, 0x42, 0x6c, 0xa5, 0x13, 0x44, 0x6f,
	0x13, 0x10, 0xbb, 0xbb, 0x79, 0xd3, 0xb6, 0x09, 0x0b, 0x31, 0x83, 0xec, 0x7b, 0xae, 0x41, 0x6d,
	0xdb, 0x38, 0x70, 0xc7, 0x9e, 0x4d, 0x30, 0xba, 0x0c, 0x8d, 0x57, 0xe1, 0x40, 0xac, 0x5e, 0x8f,
	0x64, 0xc7, 0x6b, 0xb9, 0x97, 0xa1, 0x32, 0xf6, 0x19, 0x3b, 0x30, 0x02, 0x28, 0x07, 0x43, 0x46,
	0x0e, 0x6f, 0xee, 0x05, 0xe1, 0x25, 0x2c, 0x75, 0x2d, 0xeb, 0x63, 0x37, 0x3a, 0x55, 0x04, 0xbb,
	0x07, 0x50, 0x8b, 0x4e, 0xc2, 0xb3, 0xb0, 0xa6, 0xc8, 0x42, 0x64, 0xdc, 0x17, 0x26, 0xfa, 0x27,
	0xb0, 0x3c, 0xb5, 0x32, 0x0f, 0xf0, 0x49, 0x97, 0x7e, 0x08, 0x17, 0xfa, 0x78, 0xe8, 0x1e, 0xe0,
	0x6d, 0xcf, 0x1d, 0x4e, 0x7b, 0x9e, 0x9d, 0x17, 0xfd, 0x1e, 0x5c, 0x4c, 0x5e, 0x21, 0x13, 0x02,
	0xf7, 0x60, 0x25, 0xb8, 0x5f, 0xc2, 0xe6, 0xd1, 0xe1, 0x0b, 0x9a, 0xa7, 0x70, 0x77, 0x29, 0x8f,
	0x9a, 0x9c, 0x47, 0x7d, 0x17, 0x56, 0x55, 0x96, 0x7c, 0xd7, 0x87, 0x00, 0x91, 0x93, 0xe1, 0x4d,
	0xcd, 0x0e, 0x8c, 0x64, 0xa3, 0xff, 0xad, 0x41, 0xb9, 0x8f, 0x0f, 0x6c, 0xfc, 0x1a, 0x5d, 0x80,
	0x9a, 0x47, 0xbf, 0x84, 0x27, 0x55, 0x26, 0x38, 0x25, 0x5c, 0x8a, 0xdf, 0x9c, 0x62, 0xec, 0x37,
	0x87, 0x76, 0x1a, 0xc3, 0xc0, 0x9a, 0xa3, 0x31, 0x1c, 0x4e, 0x20, 0xb9, 0x9c, 0x8e, 0xe4, 0x4a,
	0x3a, 0x92, 0xab, 0x93, 0x48, 0x7e, 0x06, 0x0b, 0x8f, 0xe9, 0x52, 0xec, 0xfc, 0x61, 0x3a, 0xee,
	0x40, 0x99, 0x9d, 0x9a, 0x03, 0x6d, 0x45, 0x59, 0x4f, 0x50, 0x2b, 0xae, 0xac, 0x7f, 0x00, 0x8b,
	0xf1, 0xd5, 0x78, 0x8a, 0x66, 0x5c, 0xee, 0x5d, 0xc6, 0xca, 0x4c, 0x1a, 0x01, 0x35, 0x29, 0x0b,
	0x5a, 0x62, 0x16, 0x74, 0x0b, 0x16, 0x62, 0x0b, 0x70, 0x77, 0xee, 0x42, 0x85, 0xed, 0x10, 0xc2,
	0x25, 0xc3, 0x9f, 0x50, 0x3b, 0xf8, 0xf1, 0xa0, 0xfd, 0x5f, 0xd8, 0x24, 0xd2, 0x81, 0xde, 0x09,
	0x09, 0x31, 0x1e, 0xc3, 0x34, 0x28, 0xe9, 0xef, 0xc0, 0x62, 0xdc, 0x26, 0xeb, 0x0a, 0x75, 0xfe,
	0x42, 0xb0, 0xf8, 0xbe, 0xec, 0xe5, 0x47, 0xcc, 0x49, 0xf4, 0x12, 0xe6, 0x59, 0xd0, 0xa5, 0x47,
	0xb7, 0xec, 0x46, 0xb1, 0x9d, 0xad, 0x82, 0xbe, 0x84, 0x66, 0xec, 0x85, 0x06, 0xdd, 0x50, 0xd8,
	0x24, 0x3d, 0x02, 0xb5, 0x6f, 0xe6, 0x53, 0xe6, 0x07, 0x1f, 0xc1, 0xdc, 0x44, 0x53, 0x8c, 0x6e,
	0xa9, 0xaa, 0x9a, 0xc4, 0x97, 0x9d, 0xf6, 0x46, 0x5e, 0x75, 0xbe, 0xa3, 0x0f, 0xf3, 0x93, 0x6f,
	0x20, 0x48, 0xb5, 0x86, 0xe2, 0x29, 0xa6, 0xbd, 0x99, 0x5b, 0x5f, 0x6c, 0x3a, 0xf9, 0xb2, 0xa1,
	0xdc, 0x54, 0xf1, 0x84, 0xa2, 0xdc, 0x54, 0xf9, 0x64, 0xf2, 0xbd, 0x06, 0xe7, 0x95, 0x2f, 0x0e,
	0xe8, 0x6e, 0xbe, 0xb8, 0x4d, 0x3d, 0xa5, 0xb4, 0xef, 0x1d, 0xdf, 0x90, 0x3b, 0x14, 0x41, 0x56,
	0x7a, 0x9c, 0xc8, 0x6e, 0x59, 0xda, 0xd9, 0x2a, 0x1c, 0xb2, 0x92, 0x20, 0x05, 0xb2, 0x53, 0xcd,
	0x4e, 0x1a, 0x64, 0x13, 0x3a, 0x1b, 0x0e, 0x59, 0xa9, 0xd9, 0x4c, 0x85, 0xec, 0x74, 0x73, 0x9b,
	0x0a, 0xd9, 0xa4, 0x1e, 0x36, 0x82, 0xac, 0x74, 0xc0, 0x74, 0xc8, 0x4e, 0x9f, 0x71, 0x33, 0xb7,
	0xfe, 0x24, 0x64, 0x73, 0x6c, 0xaa, 0xe8, 0x22, 0x33, 0x20, 0x9b, 0xb0, 0x69, 0x0f, 0xea, 0x0c,
	0x21, 0xac, 0x41, 0x4c, 0xad, 0x64, 0xdb, 0xa9, 0xb3, 0xe8, 0x33, 0xa8, 0x86, 0x6d, 0x06, 0x7a,
	0x5b, 0x9d, 0x60, 0xb9, 0xfc, 0x6d, 0x5f, 0xcd, 0xd4, 0xe3, 0x7e, 0x1a, 0x00, 0xa2, 0x71, 0x40,
	0xd7, 0x52, 0xf2, 0x19, 0x6b, 0x4f, 0xda, 0xeb, 0x39, 0x34, 0xf9, 0x16, 0x16, 0xd4, 0xa5, 0x5a,
	0x1f, 0xad, 0xa7, 0xe6, 0x2f, 0x76, 0x8a, 0xeb, 0x79, 0x54, 0xc5, 0x2e, 0x52, 0x55, 0xaf, 0xdc,
	0x65, 0xba, 0x55, 0x50, 0xee, 0x92, 0xd4, 0x24, 0x8c, 0x60, 0x6e, 0xa2, 0xbc, 0x55, 0x5e, 0x99,
	0xe4, 0x02, 0x5b, 0x79, 0x65, 0x54, 0x55, 0xf3, 0x37, 0xb0, 0x98, 0x54, 0xb3, 0xa2, 0x8e, 0x92,
	0x4b, 0x94, 0x25, 0x72, 0xfb, 0xf6, 0xb1, 0x6c, 0xb8, 0x03, 0xdf, 0x6a, 0xec, 0x6d, 0x6b, 0xba,
	0x82, 0x45, 0x5b, 0x29, 0x20, 0x50, 0x96, 0xca, 0xed, 0x3b, 0xc7, 0xb4, 0xe2, 0x7e, 0xec, 0x41,
	0x43, 0xae, 0xcd, 0x90, 0x2a, 0x6d, 0x09, 0xe5, 0x60, 0xfb, 0x46, 0x2e, 0x5d, 0x81, 0x24, 0xa9,
	0xe8, 0x42, 0xeb, 0xa9, 0x1c, 0x27, 0x57, 0x76, 0x4a, 0x24, 0x25, 0xd5, 0x70, 0x7b, 0xd0, 0x90,
	0x0b, 0x28, 0x74, 0x3d, 0x83, 0x61, 0xf2, 0x1c, 0x27, 0xa9, 0x22, 0x7b, 0x34, 0xff, 0xf3, 0xd1,
	0xaa, 0xf6, 0xeb, 0xd1, 0xaa, 0xf6, 0xfb, 0xd1, 0xaa, 0xf6, 0xc3, 0x1f, 0xab, 0xff, 0xdb, 0x2d,
	0xd3, 0xff, 0xc9, 0x6f, 0xff, 0x13, 0x00, 0x00, 0xff, 0xff, 0x25, 0x78, 0x57, 0x4d, 0x52, 0x1f,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EstablishmentServiceClient is the client API for EstablishmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EstablishmentServiceClient interface {
	// ATTRACTION
	CreateAttraction(ctx context.Context, in *Attraction, opts ...grpc.CallOption) (*Attraction, error)
	GetAttraction(ctx context.Context, in *GetAttractionRequest, opts ...grpc.CallOption) (*GetAttractionResponse, error)
	ListAttractions(ctx context.Context, in *ListAttractionsRequest, opts ...grpc.CallOption) (*ListAttractionsResponse, error)
	UpdateAttraction(ctx context.Context, in *UpdateAttractionRequest, opts ...grpc.CallOption) (*UpdateAttractionResponse, error)
	DeleteAttraction(ctx context.Context, in *DeleteAttractionRequest, opts ...grpc.CallOption) (*DeleteAttractionResponse, error)
	ListAttractionsByLocation(ctx context.Context, in *ListAttractionsByLocationRequest, opts ...grpc.CallOption) (*ListAttractionsByLocationResponse, error)
	// RESTAURANT
	CreateRestaurant(ctx context.Context, in *Restaurant, opts ...grpc.CallOption) (*Restaurant, error)
	GetRestaurant(ctx context.Context, in *GetRestaurantRequest, opts ...grpc.CallOption) (*GetRestaurantResponse, error)
	ListRestaurants(ctx context.Context, in *ListRestaurantsRequest, opts ...grpc.CallOption) (*ListRestaurantsResponse, error)
	UpdateRestaurant(ctx context.Context, in *UpdateRestaurantRequest, opts ...grpc.CallOption) (*UpdateRestaurantResponse, error)
	DeleteRestaurant(ctx context.Context, in *DeleteRestaurantRequest, opts ...grpc.CallOption) (*DeleteRestaurantResponse, error)
	// HOTEL
	CreateHotel(ctx context.Context, in *Hotel, opts ...grpc.CallOption) (*Hotel, error)
	GetHotel(ctx context.Context, in *GetHotelRequest, opts ...grpc.CallOption) (*GetHotelResponse, error)
	ListHotels(ctx context.Context, in *ListHotelsRequest, opts ...grpc.CallOption) (*ListHotelsResponse, error)
	UpdateHotel(ctx context.Context, in *UpdateHotelRequest, opts ...grpc.CallOption) (*UpdateHotelResponse, error)
	DeleteHotel(ctx context.Context, in *DeleteHotelRequest, opts ...grpc.CallOption) (*DeleteHotelResponse, error)
	// FAVOURITES
	AddToFavourites(ctx context.Context, in *AddToFavouritesRequest, opts ...grpc.CallOption) (*AddToFavouritesResponse, error)
	RemoveFromFavourites(ctx context.Context, in *RemoveFromFavouritesRequest, opts ...grpc.CallOption) (*RemoveFromFavouritesResponse, error)
	ListFavouritesByUserId(ctx context.Context, in *ListFavouritesByUserIdRequest, opts ...grpc.CallOption) (*ListFavouritesByUserIdResponse, error)
	// REVIEW
	CreateReview(ctx context.Context, in *CreateReviewRequest, opts ...grpc.CallOption) (*CreateReviewResponse, error)
	ListReviews(ctx context.Context, in *ListReviewsRequest, opts ...grpc.CallOption) (*ListReviewsResponse, error)
	DeleteReview(ctx context.Context, in *DeleteReviewRequest, opts ...grpc.CallOption) (*DeleteReviewResponse, error)
}

type establishmentServiceClient struct {
	cc *grpc.ClientConn
}

func NewEstablishmentServiceClient(cc *grpc.ClientConn) EstablishmentServiceClient {
	return &establishmentServiceClient{cc}
}

func (c *establishmentServiceClient) CreateAttraction(ctx context.Context, in *Attraction, opts ...grpc.CallOption) (*Attraction, error) {
	out := new(Attraction)
	err := c.cc.Invoke(ctx, "/establishment_service.EstablishmentService/CreateAttraction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *establishmentServiceClient) GetAttraction(ctx context.Context, in *GetAttractionRequest, opts ...grpc.CallOption) (*GetAttractionResponse, error) {
	out := new(GetAttractionResponse)
	err := c.cc.Invoke(ctx, "/establishment_service.EstablishmentService/GetAttraction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *establishmentServiceClient) ListAttractions(ctx context.Context, in *ListAttractionsRequest, opts ...grpc.CallOption) (*ListAttractionsResponse, error) {
	out := new(ListAttractionsResponse)
	err := c.cc.Invoke(ctx, "/establishment_service.EstablishmentService/ListAttractions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *establishmentServiceClient) UpdateAttraction(ctx context.Context, in *UpdateAttractionRequest, opts ...grpc.CallOption) (*UpdateAttractionResponse, error) {
	out := new(UpdateAttractionResponse)
	err := c.cc.Invoke(ctx, "/establishment_service.EstablishmentService/UpdateAttraction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *establishmentServiceClient) DeleteAttraction(ctx context.Context, in *DeleteAttractionRequest, opts ...grpc.CallOption) (*DeleteAttractionResponse, error) {
	out := new(DeleteAttractionResponse)
	err := c.cc.Invoke(ctx, "/establishment_service.EstablishmentService/DeleteAttraction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *establishmentServiceClient) ListAttractionsByLocation(ctx context.Context, in *ListAttractionsByLocationRequest, opts ...grpc.CallOption) (*ListAttractionsByLocationResponse, error) {
	out := new(ListAttractionsByLocationResponse)
	err := c.cc.Invoke(ctx, "/establishment_service.EstablishmentService/ListAttractionsByLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *establishmentServiceClient) CreateRestaurant(ctx context.Context, in *Restaurant, opts ...grpc.CallOption) (*Restaurant, error) {
	out := new(Restaurant)
	err := c.cc.Invoke(ctx, "/establishment_service.EstablishmentService/CreateRestaurant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *establishmentServiceClient) GetRestaurant(ctx context.Context, in *GetRestaurantRequest, opts ...grpc.CallOption) (*GetRestaurantResponse, error) {
	out := new(GetRestaurantResponse)
	err := c.cc.Invoke(ctx, "/establishment_service.EstablishmentService/GetRestaurant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *establishmentServiceClient) ListRestaurants(ctx context.Context, in *ListRestaurantsRequest, opts ...grpc.CallOption) (*ListRestaurantsResponse, error) {
	out := new(ListRestaurantsResponse)
	err := c.cc.Invoke(ctx, "/establishment_service.EstablishmentService/ListRestaurants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *establishmentServiceClient) UpdateRestaurant(ctx context.Context, in *UpdateRestaurantRequest, opts ...grpc.CallOption) (*UpdateRestaurantResponse, error) {
	out := new(UpdateRestaurantResponse)
	err := c.cc.Invoke(ctx, "/establishment_service.EstablishmentService/UpdateRestaurant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *establishmentServiceClient) DeleteRestaurant(ctx context.Context, in *DeleteRestaurantRequest, opts ...grpc.CallOption) (*DeleteRestaurantResponse, error) {
	out := new(DeleteRestaurantResponse)
	err := c.cc.Invoke(ctx, "/establishment_service.EstablishmentService/DeleteRestaurant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *establishmentServiceClient) CreateHotel(ctx context.Context, in *Hotel, opts ...grpc.CallOption) (*Hotel, error) {
	out := new(Hotel)
	err := c.cc.Invoke(ctx, "/establishment_service.EstablishmentService/CreateHotel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *establishmentServiceClient) GetHotel(ctx context.Context, in *GetHotelRequest, opts ...grpc.CallOption) (*GetHotelResponse, error) {
	out := new(GetHotelResponse)
	err := c.cc.Invoke(ctx, "/establishment_service.EstablishmentService/GetHotel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *establishmentServiceClient) ListHotels(ctx context.Context, in *ListHotelsRequest, opts ...grpc.CallOption) (*ListHotelsResponse, error) {
	out := new(ListHotelsResponse)
	err := c.cc.Invoke(ctx, "/establishment_service.EstablishmentService/ListHotels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *establishmentServiceClient) UpdateHotel(ctx context.Context, in *UpdateHotelRequest, opts ...grpc.CallOption) (*UpdateHotelResponse, error) {
	out := new(UpdateHotelResponse)
	err := c.cc.Invoke(ctx, "/establishment_service.EstablishmentService/UpdateHotel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *establishmentServiceClient) DeleteHotel(ctx context.Context, in *DeleteHotelRequest, opts ...grpc.CallOption) (*DeleteHotelResponse, error) {
	out := new(DeleteHotelResponse)
	err := c.cc.Invoke(ctx, "/establishment_service.EstablishmentService/DeleteHotel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *establishmentServiceClient) AddToFavourites(ctx context.Context, in *AddToFavouritesRequest, opts ...grpc.CallOption) (*AddToFavouritesResponse, error) {
	out := new(AddToFavouritesResponse)
	err := c.cc.Invoke(ctx, "/establishment_service.EstablishmentService/AddToFavourites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *establishmentServiceClient) RemoveFromFavourites(ctx context.Context, in *RemoveFromFavouritesRequest, opts ...grpc.CallOption) (*RemoveFromFavouritesResponse, error) {
	out := new(RemoveFromFavouritesResponse)
	err := c.cc.Invoke(ctx, "/establishment_service.EstablishmentService/RemoveFromFavourites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *establishmentServiceClient) ListFavouritesByUserId(ctx context.Context, in *ListFavouritesByUserIdRequest, opts ...grpc.CallOption) (*ListFavouritesByUserIdResponse, error) {
	out := new(ListFavouritesByUserIdResponse)
	err := c.cc.Invoke(ctx, "/establishment_service.EstablishmentService/ListFavouritesByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *establishmentServiceClient) CreateReview(ctx context.Context, in *CreateReviewRequest, opts ...grpc.CallOption) (*CreateReviewResponse, error) {
	out := new(CreateReviewResponse)
	err := c.cc.Invoke(ctx, "/establishment_service.EstablishmentService/CreateReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *establishmentServiceClient) ListReviews(ctx context.Context, in *ListReviewsRequest, opts ...grpc.CallOption) (*ListReviewsResponse, error) {
	out := new(ListReviewsResponse)
	err := c.cc.Invoke(ctx, "/establishment_service.EstablishmentService/ListReviews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *establishmentServiceClient) DeleteReview(ctx context.Context, in *DeleteReviewRequest, opts ...grpc.CallOption) (*DeleteReviewResponse, error) {
	out := new(DeleteReviewResponse)
	err := c.cc.Invoke(ctx, "/establishment_service.EstablishmentService/DeleteReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EstablishmentServiceServer is the server API for EstablishmentService service.
type EstablishmentServiceServer interface {
	// ATTRACTION
	CreateAttraction(context.Context, *Attraction) (*Attraction, error)
	GetAttraction(context.Context, *GetAttractionRequest) (*GetAttractionResponse, error)
	ListAttractions(context.Context, *ListAttractionsRequest) (*ListAttractionsResponse, error)
	UpdateAttraction(context.Context, *UpdateAttractionRequest) (*UpdateAttractionResponse, error)
	DeleteAttraction(context.Context, *DeleteAttractionRequest) (*DeleteAttractionResponse, error)
	ListAttractionsByLocation(context.Context, *ListAttractionsByLocationRequest) (*ListAttractionsByLocationResponse, error)
	// RESTAURANT
	CreateRestaurant(context.Context, *Restaurant) (*Restaurant, error)
	GetRestaurant(context.Context, *GetRestaurantRequest) (*GetRestaurantResponse, error)
	ListRestaurants(context.Context, *ListRestaurantsRequest) (*ListRestaurantsResponse, error)
	UpdateRestaurant(context.Context, *UpdateRestaurantRequest) (*UpdateRestaurantResponse, error)
	DeleteRestaurant(context.Context, *DeleteRestaurantRequest) (*DeleteRestaurantResponse, error)
	// HOTEL
	CreateHotel(context.Context, *Hotel) (*Hotel, error)
	GetHotel(context.Context, *GetHotelRequest) (*GetHotelResponse, error)
	ListHotels(context.Context, *ListHotelsRequest) (*ListHotelsResponse, error)
	UpdateHotel(context.Context, *UpdateHotelRequest) (*UpdateHotelResponse, error)
	DeleteHotel(context.Context, *DeleteHotelRequest) (*DeleteHotelResponse, error)
	// FAVOURITES
	AddToFavourites(context.Context, *AddToFavouritesRequest) (*AddToFavouritesResponse, error)
	RemoveFromFavourites(context.Context, *RemoveFromFavouritesRequest) (*RemoveFromFavouritesResponse, error)
	ListFavouritesByUserId(context.Context, *ListFavouritesByUserIdRequest) (*ListFavouritesByUserIdResponse, error)
	// REVIEW
	CreateReview(context.Context, *CreateReviewRequest) (*CreateReviewResponse, error)
	ListReviews(context.Context, *ListReviewsRequest) (*ListReviewsResponse, error)
	DeleteReview(context.Context, *DeleteReviewRequest) (*DeleteReviewResponse, error)
}

// UnimplementedEstablishmentServiceServer can be embedded to have forward compatible implementations.
type UnimplementedEstablishmentServiceServer struct {
}

func (*UnimplementedEstablishmentServiceServer) CreateAttraction(ctx context.Context, req *Attraction) (*Attraction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAttraction not implemented")
}
func (*UnimplementedEstablishmentServiceServer) GetAttraction(ctx context.Context, req *GetAttractionRequest) (*GetAttractionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAttraction not implemented")
}
func (*UnimplementedEstablishmentServiceServer) ListAttractions(ctx context.Context, req *ListAttractionsRequest) (*ListAttractionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAttractions not implemented")
}
func (*UnimplementedEstablishmentServiceServer) UpdateAttraction(ctx context.Context, req *UpdateAttractionRequest) (*UpdateAttractionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAttraction not implemented")
}
func (*UnimplementedEstablishmentServiceServer) DeleteAttraction(ctx context.Context, req *DeleteAttractionRequest) (*DeleteAttractionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAttraction not implemented")
}
func (*UnimplementedEstablishmentServiceServer) ListAttractionsByLocation(ctx context.Context, req *ListAttractionsByLocationRequest) (*ListAttractionsByLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAttractionsByLocation not implemented")
}
func (*UnimplementedEstablishmentServiceServer) CreateRestaurant(ctx context.Context, req *Restaurant) (*Restaurant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRestaurant not implemented")
}
func (*UnimplementedEstablishmentServiceServer) GetRestaurant(ctx context.Context, req *GetRestaurantRequest) (*GetRestaurantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRestaurant not implemented")
}
func (*UnimplementedEstablishmentServiceServer) ListRestaurants(ctx context.Context, req *ListRestaurantsRequest) (*ListRestaurantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRestaurants not implemented")
}
func (*UnimplementedEstablishmentServiceServer) UpdateRestaurant(ctx context.Context, req *UpdateRestaurantRequest) (*UpdateRestaurantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRestaurant not implemented")
}
func (*UnimplementedEstablishmentServiceServer) DeleteRestaurant(ctx context.Context, req *DeleteRestaurantRequest) (*DeleteRestaurantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRestaurant not implemented")
}
func (*UnimplementedEstablishmentServiceServer) CreateHotel(ctx context.Context, req *Hotel) (*Hotel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHotel not implemented")
}
func (*UnimplementedEstablishmentServiceServer) GetHotel(ctx context.Context, req *GetHotelRequest) (*GetHotelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHotel not implemented")
}
func (*UnimplementedEstablishmentServiceServer) ListHotels(ctx context.Context, req *ListHotelsRequest) (*ListHotelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHotels not implemented")
}
func (*UnimplementedEstablishmentServiceServer) UpdateHotel(ctx context.Context, req *UpdateHotelRequest) (*UpdateHotelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHotel not implemented")
}
func (*UnimplementedEstablishmentServiceServer) DeleteHotel(ctx context.Context, req *DeleteHotelRequest) (*DeleteHotelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHotel not implemented")
}
func (*UnimplementedEstablishmentServiceServer) AddToFavourites(ctx context.Context, req *AddToFavouritesRequest) (*AddToFavouritesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToFavourites not implemented")
}
func (*UnimplementedEstablishmentServiceServer) RemoveFromFavourites(ctx context.Context, req *RemoveFromFavouritesRequest) (*RemoveFromFavouritesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromFavourites not implemented")
}
func (*UnimplementedEstablishmentServiceServer) ListFavouritesByUserId(ctx context.Context, req *ListFavouritesByUserIdRequest) (*ListFavouritesByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFavouritesByUserId not implemented")
}
func (*UnimplementedEstablishmentServiceServer) CreateReview(ctx context.Context, req *CreateReviewRequest) (*CreateReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReview not implemented")
}
func (*UnimplementedEstablishmentServiceServer) ListReviews(ctx context.Context, req *ListReviewsRequest) (*ListReviewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReviews not implemented")
}
func (*UnimplementedEstablishmentServiceServer) DeleteReview(ctx context.Context, req *DeleteReviewRequest) (*DeleteReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReview not implemented")
}

func RegisterEstablishmentServiceServer(s *grpc.Server, srv EstablishmentServiceServer) {
	s.RegisterService(&_EstablishmentService_serviceDesc, srv)
}

func _EstablishmentService_CreateAttraction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Attraction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstablishmentServiceServer).CreateAttraction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/establishment_service.EstablishmentService/CreateAttraction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstablishmentServiceServer).CreateAttraction(ctx, req.(*Attraction))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstablishmentService_GetAttraction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAttractionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstablishmentServiceServer).GetAttraction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/establishment_service.EstablishmentService/GetAttraction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstablishmentServiceServer).GetAttraction(ctx, req.(*GetAttractionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstablishmentService_ListAttractions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAttractionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstablishmentServiceServer).ListAttractions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/establishment_service.EstablishmentService/ListAttractions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstablishmentServiceServer).ListAttractions(ctx, req.(*ListAttractionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstablishmentService_UpdateAttraction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAttractionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstablishmentServiceServer).UpdateAttraction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/establishment_service.EstablishmentService/UpdateAttraction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstablishmentServiceServer).UpdateAttraction(ctx, req.(*UpdateAttractionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstablishmentService_DeleteAttraction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAttractionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstablishmentServiceServer).DeleteAttraction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/establishment_service.EstablishmentService/DeleteAttraction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstablishmentServiceServer).DeleteAttraction(ctx, req.(*DeleteAttractionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstablishmentService_ListAttractionsByLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAttractionsByLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstablishmentServiceServer).ListAttractionsByLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/establishment_service.EstablishmentService/ListAttractionsByLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstablishmentServiceServer).ListAttractionsByLocation(ctx, req.(*ListAttractionsByLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstablishmentService_CreateRestaurant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Restaurant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstablishmentServiceServer).CreateRestaurant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/establishment_service.EstablishmentService/CreateRestaurant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstablishmentServiceServer).CreateRestaurant(ctx, req.(*Restaurant))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstablishmentService_GetRestaurant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRestaurantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstablishmentServiceServer).GetRestaurant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/establishment_service.EstablishmentService/GetRestaurant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstablishmentServiceServer).GetRestaurant(ctx, req.(*GetRestaurantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstablishmentService_ListRestaurants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRestaurantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstablishmentServiceServer).ListRestaurants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/establishment_service.EstablishmentService/ListRestaurants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstablishmentServiceServer).ListRestaurants(ctx, req.(*ListRestaurantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstablishmentService_UpdateRestaurant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRestaurantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstablishmentServiceServer).UpdateRestaurant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/establishment_service.EstablishmentService/UpdateRestaurant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstablishmentServiceServer).UpdateRestaurant(ctx, req.(*UpdateRestaurantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstablishmentService_DeleteRestaurant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRestaurantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstablishmentServiceServer).DeleteRestaurant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/establishment_service.EstablishmentService/DeleteRestaurant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstablishmentServiceServer).DeleteRestaurant(ctx, req.(*DeleteRestaurantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstablishmentService_CreateHotel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Hotel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstablishmentServiceServer).CreateHotel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/establishment_service.EstablishmentService/CreateHotel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstablishmentServiceServer).CreateHotel(ctx, req.(*Hotel))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstablishmentService_GetHotel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHotelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstablishmentServiceServer).GetHotel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/establishment_service.EstablishmentService/GetHotel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstablishmentServiceServer).GetHotel(ctx, req.(*GetHotelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstablishmentService_ListHotels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHotelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstablishmentServiceServer).ListHotels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/establishment_service.EstablishmentService/ListHotels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstablishmentServiceServer).ListHotels(ctx, req.(*ListHotelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstablishmentService_UpdateHotel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHotelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstablishmentServiceServer).UpdateHotel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/establishment_service.EstablishmentService/UpdateHotel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstablishmentServiceServer).UpdateHotel(ctx, req.(*UpdateHotelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstablishmentService_DeleteHotel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHotelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstablishmentServiceServer).DeleteHotel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/establishment_service.EstablishmentService/DeleteHotel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstablishmentServiceServer).DeleteHotel(ctx, req.(*DeleteHotelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstablishmentService_AddToFavourites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddToFavouritesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstablishmentServiceServer).AddToFavourites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/establishment_service.EstablishmentService/AddToFavourites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstablishmentServiceServer).AddToFavourites(ctx, req.(*AddToFavouritesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstablishmentService_RemoveFromFavourites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFromFavouritesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstablishmentServiceServer).RemoveFromFavourites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/establishment_service.EstablishmentService/RemoveFromFavourites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstablishmentServiceServer).RemoveFromFavourites(ctx, req.(*RemoveFromFavouritesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstablishmentService_ListFavouritesByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFavouritesByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstablishmentServiceServer).ListFavouritesByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/establishment_service.EstablishmentService/ListFavouritesByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstablishmentServiceServer).ListFavouritesByUserId(ctx, req.(*ListFavouritesByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstablishmentService_CreateReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstablishmentServiceServer).CreateReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/establishment_service.EstablishmentService/CreateReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstablishmentServiceServer).CreateReview(ctx, req.(*CreateReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstablishmentService_ListReviews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReviewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstablishmentServiceServer).ListReviews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/establishment_service.EstablishmentService/ListReviews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstablishmentServiceServer).ListReviews(ctx, req.(*ListReviewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstablishmentService_DeleteReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstablishmentServiceServer).DeleteReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/establishment_service.EstablishmentService/DeleteReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstablishmentServiceServer).DeleteReview(ctx, req.(*DeleteReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EstablishmentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "establishment_service.EstablishmentService",
	HandlerType: (*EstablishmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAttraction",
			Handler:    _EstablishmentService_CreateAttraction_Handler,
		},
		{
			MethodName: "GetAttraction",
			Handler:    _EstablishmentService_GetAttraction_Handler,
		},
		{
			MethodName: "ListAttractions",
			Handler:    _EstablishmentService_ListAttractions_Handler,
		},
		{
			MethodName: "UpdateAttraction",
			Handler:    _EstablishmentService_UpdateAttraction_Handler,
		},
		{
			MethodName: "DeleteAttraction",
			Handler:    _EstablishmentService_DeleteAttraction_Handler,
		},
		{
			MethodName: "ListAttractionsByLocation",
			Handler:    _EstablishmentService_ListAttractionsByLocation_Handler,
		},
		{
			MethodName: "CreateRestaurant",
			Handler:    _EstablishmentService_CreateRestaurant_Handler,
		},
		{
			MethodName: "GetRestaurant",
			Handler:    _EstablishmentService_GetRestaurant_Handler,
		},
		{
			MethodName: "ListRestaurants",
			Handler:    _EstablishmentService_ListRestaurants_Handler,
		},
		{
			MethodName: "UpdateRestaurant",
			Handler:    _EstablishmentService_UpdateRestaurant_Handler,
		},
		{
			MethodName: "DeleteRestaurant",
			Handler:    _EstablishmentService_DeleteRestaurant_Handler,
		},
		{
			MethodName: "CreateHotel",
			Handler:    _EstablishmentService_CreateHotel_Handler,
		},
		{
			MethodName: "GetHotel",
			Handler:    _EstablishmentService_GetHotel_Handler,
		},
		{
			MethodName: "ListHotels",
			Handler:    _EstablishmentService_ListHotels_Handler,
		},
		{
			MethodName: "UpdateHotel",
			Handler:    _EstablishmentService_UpdateHotel_Handler,
		},
		{
			MethodName: "DeleteHotel",
			Handler:    _EstablishmentService_DeleteHotel_Handler,
		},
		{
			MethodName: "AddToFavourites",
			Handler:    _EstablishmentService_AddToFavourites_Handler,
		},
		{
			MethodName: "RemoveFromFavourites",
			Handler:    _EstablishmentService_RemoveFromFavourites_Handler,
		},
		{
			MethodName: "ListFavouritesByUserId",
			Handler:    _EstablishmentService_ListFavouritesByUserId_Handler,
		},
		{
			MethodName: "CreateReview",
			Handler:    _EstablishmentService_CreateReview_Handler,
		},
		{
			MethodName: "ListReviews",
			Handler:    _EstablishmentService_ListReviews_Handler,
		},
		{
			MethodName: "DeleteReview",
			Handler:    _EstablishmentService_DeleteReview_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "establishment-proto/establishment.proto",
}

func (m *Image) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Image) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Image) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DeletedAt) > 0 {
		i -= len(m.DeletedAt)
		copy(dAtA[i:], m.DeletedAt)
		i = encodeVarintEstablishment(dAtA, i, uint64(len(m.DeletedAt)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.UpdatedAt) > 0 {
		i -= len(m.UpdatedAt)
		copy(dAtA[i:], m.UpdatedAt)
		i = encodeVarintEstablishment(dAtA, i, uint64(len(m.UpdatedAt)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CreatedAt) > 0 {
		i -= len(m.CreatedAt)
		copy(dAtA[i:], m.CreatedAt)
		i = encodeVarintEstablishment(dAtA, i, uint64(len(m.CreatedAt)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ImageUrl) > 0 {
		i -= len(m.ImageUrl)
		copy(dAtA[i:], m.ImageUrl)
		i = encodeVarintEstablishment(dAtA, i, uint64(len(m.ImageUrl)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.EstablishmentId) > 0 {
		i -= len(m.EstablishmentId)
		copy(dAtA[i:], m.EstablishmentId)
		i = encodeVarintEstablishment(dAtA, i, uint64(len(m.EstablishmentId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ImageId) > 0 {
		i -= len(m.ImageId)
		copy(dAtA[i:], m.ImageId)
		i = encodeVarintEstablishment(dAtA, i, uint64(len(m.ImageId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Location) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Location) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Location) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DeletedAt) > 0 {
		i -= len(m.DeletedAt)
		copy(dAtA[i:], m.DeletedAt)
		i = encodeVarintEstablishment(dAtA, i, uint64(len(m.DeletedAt)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.UpdatedAt) > 0 {
		i -= len(m.UpdatedAt)
		copy(dAtA[i:], m.UpdatedAt)
		i = encodeVarintEstablishment(dAtA, i, uint64(len(m.UpdatedAt)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.CreatedAt) > 0 {
		i -= len(m.CreatedAt)
		copy(dAtA[i:], m.CreatedAt)
		i = encodeVarintEstablishment(dAtA, i, uint64(len(m.CreatedAt)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.StateProvince) > 0 {
		i -= len(m.StateProvince)
		copy(dAtA[i:], m.StateProvince)
		i = encodeVarintEstablishment(dAtA, i, uint64(len(m.StateProvince)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.City) > 0 {
		i -= len(m.City)
		copy(dAtA[i:], m.City)
		i = encodeVarintEstablishment(dAtA, i, uint64(len(m.City)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Country) > 0 {
		i -= len(m.Country)
		copy(dAtA[i:], m.Country)
		i = encodeVarintEstablishment(dAtA, i, uint64(len(m.Country)))
		i--
		dAtA[i] = 0x32
	}
	if m.Longitude != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Longitude))))
		i--
		dAtA[i] = 0x2d
	}
	if m.Latitude != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Latitude))))
		i--
		dAtA[i] = 0x25
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintEstablishment(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.EstablishmentId) > 0 {
		i -= len(m.EstablishmentId)
		copy(dAtA[i:], m.EstablishmentId)
		i = encodeVarintEstablishment(dAtA, i, uint64(len(m.EstablishmentId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.LocationId) > 0 {
		i -= len(m.LocationId)
		copy(dAtA[i:], m.LocationId)
		i = encodeVarintEstablishment(dAtA, i, uint64(len(m.LocationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Attraction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Attraction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Attraction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DeletedAt) > 0 {
		i -= len(m.DeletedAt)
		copy(dAtA[i:], m.DeletedAt)
		i = encodeVarintEstablishment(dAtA, i, uint64(len(m.DeletedAt)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.UpdatedAt) > 0 {
		i -= len(m.UpdatedAt)
		copy(dAtA[i:], m.UpdatedAt)
		i = encodeVarintEstablishment(dAtA, i, uint64(len(m.UpdatedAt)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.CreatedAt) > 0 {
		i -= len(m.CreatedAt)
		copy(dAtA[i:], m.CreatedAt)
		i = encodeVarintEstablishment(dAtA, i, uint64(len(m.CreatedAt)))
		i--
		dAtA[i] = 0x5a
	}
	if m.Location != nil {
		{
			size, err := m.Location.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEstablishment(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if len(m.Images) > 0 {
		for iNdEx := len(m.Images) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Images[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEstablishment(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.WebsiteUrl) > 0 {
		i -= len(m.WebsiteUrl)
		copy(dAtA[i:], m.WebsiteUrl)
		i = encodeVarintEstablishment(dAtA, i, uint64(len(m.WebsiteUrl)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.LicenceUrl) > 0 {
		i -= len(m.LicenceUrl)
		copy(dAtA[i:], m.LicenceUrl)
		i = encodeVarintEstablishment(dAtA, i, uint64(len(m.LicenceUrl)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ContactNumber) > 0 {
		i -= len(m.ContactNumber)
		copy(dAtA[i:], m.ContactNumber)
		i = encodeVarintEstablishment(dAtA, i, uint64(len(m.ContactNumber)))
		i--
		dAtA[i] = 0x32
	}
	if m.Rating != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Rating))))
		i--
		dAtA[i] = 0x2d
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintEstablishment(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.AttractionName) > 0 {
		i -= len(m.AttractionName)
		copy(dAtA[i:], m.AttractionName)
		i = encodeVarintEstablishment(dAtA, i, uint64(len(m.AttractionName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OwnerId) > 0 {
		i -= len(m.OwnerId)
		copy(dAtA[i:], m.OwnerId)
		i = encodeVarintEstablishment(dAtA, i, uint64(len(m.OwnerId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AttractionId) > 0 {
		i -= len(m.AttractionId)
		copy(dAtA[i:], m.AttractionId)
		i = encodeVarintEstablishment(dAtA, i, uint64(len(m.AttractionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetAttractionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAttractionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAttractionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AttractionId) > 0 {
		i -= len(m.AttractionId)
		copy(dAtA[i:], m.AttractionId)
		i = encodeVarintEstablishment(dAtA, i, uint64(len(m.AttractionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetAttractionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAttractionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAttractionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Attraction != nil {
		{
			size, err := m.Attraction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEstablishment(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListAttractionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListAttractionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListAttractionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Limit != 0 {
		i = encodeVarintEstablishment(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.Offset != 0 {
		i = encodeVarintEstablishment(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListAttractionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListAttractionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListAttractionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Overall != 0 {
		i = encodeVarintEstablishment(dAtA, i, uint64(m.Overall))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Attractions) > 0 {
		for iNdEx := len(m.Attractions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Attractions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEstablishment(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpdateAttractionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateAttractionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateAttractionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Attraction != nil {
		{
			size, err := m.Attraction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEstablishment(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateAttractionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateAttractionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateAttractionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Attraction != nil {
		{
			size, err := m.Attraction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEstablishment(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteAttractionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteAttractionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteAttractionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AttractionId) > 0 {
		i -= len(m.AttractionId)
		copy(dAtA[i:], m.AttractionId)
		i = encodeVarintEstablishment(dAtA, i, uint64(len(m.AttractionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteAttractionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteAttractionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteAttractionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListAttractionsByLocationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListAttractionsByLocationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListAttractionsByLocationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.StateProvince) > 0 {
		i -= len(m.StateProvince)
		copy(dAtA[i:], m.StateProvince)
		i = encodeVarintEstablishment(dAtA, i, uint64(len(m.StateProvince)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.City) > 0 {
		i -= len(m.City)
		copy(dAtA[i:], m.City)
		i = encodeVarintEstablishment(dAtA, i, uint64(len(m.City)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Country) > 0 {
		i -= len(m.Country)
		copy(dAtA[i:], m.Country)
		i = encodeVarintEstablishment(dAtA, i, uint64(len(m.Country)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Limit != 0 {
		i = encodeVarintEstablishment(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.Offset != 0 {
		i = encodeVarintEstablishment(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListAttractionsByLocationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListAttractionsByLocationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListAttractionsByLocationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Attractions) > 0 {
		for iNdEx := len(m.Attractions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Attractions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEstablishment(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Restaurant) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Restaurant) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Restaurant) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DeletedAt) > 0 {
		i -= len(m.DeletedAt)
		copy(dAtA[i:], m.DeletedAt)
		i = encodeVarintEstablishment(dAtA, i, uint64(len(m.DeletedAt)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.UpdatedAt) > 0 {
		i -= len(m.UpdatedAt)
		copy(dAtA[i:], m.UpdatedAt)
		i = encodeVarintEstablishment(dAtA, i, uint64(len(m.UpdatedAt)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.CreatedAt) > 0 {
		i -= len(m.CreatedAt)
		copy(dAtA[i:], m.CreatedAt)
		i = encodeVarintEstablishment(dAtA, i, uint64(len(m.CreatedAt)))
		i--
		dAtA[i] = 0x62
	}
	if m.Location != nil {
		{
			size, err := m.Location.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEstablishment(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Images) > 0 {
		for iNdEx := len(m.Images) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Images[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEstablishment(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.WebsiteUrl) > 0 {
		i -= len(m.WebsiteUrl)
		copy(dAtA[i:], m.WebsiteUrl)
		i = encodeVarintEstablishment(dAtA, i, uint64(len(m.WebsiteUrl)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.LicenceUrl) > 0 {
		i -= len(m.LicenceUrl)
		copy(dAtA[i:], m.LicenceUrl)
		i = encodeVarintEstablishment(dAtA, i, uint64(len(m.LicenceUrl)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ContactNumber) > 0 {
		i -= len(m.ContactNumber)
		copy(dAtA[i:], m.ContactNumber)
		i = encodeVarintEstablishment(dAtA, i, uint64(len(m.ContactNumber)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.OpeningHours) > 0 {
		i -= len(m.OpeningHours)
		copy(dAtA[i:], m.OpeningHours)
		i = encodeVarintEstablishment(dAtA, i, uint64(len(m.OpeningHours)))
		i--
		dAtA[i] = 0x32
	}
	if m.Rating != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Rating))))
		i--
		dAtA[i] = 0x2d
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintEstablishment(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RestaurantName) > 0 {
		i -= len(m.RestaurantName)
		copy(dAtA[i:], m.RestaurantName)
		i = encodeVarintEstablishment(dAtA, i, uint64(len(m.RestaurantName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OwnerId) > 0 {
		i -= len(m.OwnerId)
		copy(dAtA[i:], m.OwnerId)
		i = encodeVarintEstablishment(dAtA, i, uint64(len(m.OwnerId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RestaurantId) > 0 {
		i -= len(m.RestaurantId)
		copy(dAtA[i:], m.RestaurantId)
		i = encodeVarintEstablishment(dAtA, i, uint64(len(m.RestaurantId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetRestaurantRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRestaurantRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRestaurantRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RestaurantId) > 0 {
		i -= len(m.RestaurantId)
		copy(dAtA[i:], m.RestaurantId)
		i = encodeVarintEstablishment(dAtA, i, uint64(len(m.RestaurantId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetRestaurantResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRestaurantResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRestaurantResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Restaurant != nil {
		{
			size, err := m.Restaurant.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEstablishment(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListRestaurantsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListRestaurantsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListRestaurantsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Limit != 0 {
		i = encodeVarintEstablishment(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.Offset != 0 {
		i = encodeVarintEstablishment(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListRestaurantsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListRestaurantsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListRestaurantsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Overall != 0 {
		i = encodeVarintEstablishment(dAtA, i, uint64(m.Overall))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Restaurants) > 0 {
		for iNdEx := len(m.Restaurants) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Restaurants[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEstablishment(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpdateRestaurantRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateRestaurantRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateRestaurantRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Restaurant != nil {
		{
			size, err := m.Restaurant.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEstablishment(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateRestaurantResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateRestaurantResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateRestaurantResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Restaurant != nil {
		{
			size, err := m.Restaurant.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEstablishment(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteRestaurantRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteRestaurantRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteRestaurantRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RestaurantId) > 0 {
		i -= len(m.RestaurantId)
		copy(dAtA[i:], m.RestaurantId)
		i = encodeVarintEstablishment(dAtA, i, uint64(len(m.RestaurantId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteRestaurantResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteRestaurantResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteRestaurantResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Hotel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Hotel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Hotel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DeletedAt) > 0 {
		i -= len(m.DeletedAt)
		copy(dAtA[i:], m.DeletedAt)
		i = encodeVarintEstablishment(dAtA, i, uint64(len(m.DeletedAt)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.UpdatedAt) > 0 {
		i -= len(m.UpdatedAt)
		copy(dAtA[i:], m.UpdatedAt)
		i = encodeVarintEstablishment(dAtA, i, uint64(len(m.UpdatedAt)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.CreatedAt) > 0 {
		i -= len(m.CreatedAt)
		copy(dAtA[i:], m.CreatedAt)
		i = encodeVarintEstablishment(dAtA, i, uint64(len(m.CreatedAt)))
		i--
		dAtA[i] = 0x5a
	}
	if m.Location != nil {
		{
			size, err := m.Location.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEstablishment(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if len(m.Images) > 0 {
		for iNdEx := len(m.Images) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Images[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEstablishment(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.WebsiteUrl) > 0 {
		i -= len(m.WebsiteUrl)
		copy(dAtA[i:], m.WebsiteUrl)
		i = encodeVarintEstablishment(dAtA, i, uint64(len(m.WebsiteUrl)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.LicenceUrl) > 0 {
		i -= len(m.LicenceUrl)
		copy(dAtA[i:], m.LicenceUrl)
		i = encodeVarintEstablishment(dAtA, i, uint64(len(m.LicenceUrl)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ContactNumber) > 0 {
		i -= len(m.ContactNumber)
		copy(dAtA[i:], m.ContactNumber)
		i = encodeVarintEstablishment(dAtA, i, uint64(len(m.ContactNumber)))
		i--
		dAtA[i] = 0x32
	}
	if m.Rating != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Rating))))
		i--
		dAtA[i] = 0x2d
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintEstablishment(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.HotelName) > 0 {
		i -= len(m.HotelName)
		copy(dAtA[i:], m.HotelName)
		i = encodeVarintEstablishment(dAtA, i, uint64(len(m.HotelName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OwnerId) > 0 {
		i -= len(m.OwnerId)
		copy(dAtA[i:], m.OwnerId)
		i = encodeVarintEstablishment(dAtA, i, uint64(len(m.OwnerId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.HotelId) > 0 {
		i -= len(m.HotelId)
		copy(dAtA[i:], m.HotelId)
		i = encodeVarintEstablishment(dAtA, i, uint64(len(m.HotelId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetHotelRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetHotelRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetHotelRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.HotelId) > 0 {
		i -= len(m.HotelId)
		copy(dAtA[i:], m.HotelId)
		i = encodeVarintEstablishment(dAtA, i, uint64(len(m.HotelId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetHotelResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetHotelResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetHotelResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Hotel != nil {
		{
			size, err := m.Hotel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEstablishment(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListHotelsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListHotelsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListHotelsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Limit != 0 {
		i = encodeVarintEstablishment(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.Offset != 0 {
		i = encodeVarintEstablishment(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListHotelsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListHotelsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListHotelsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Overall != 0 {
		i = encodeVarintEstablishment(dAtA, i, uint64(m.Overall))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Hotels) > 0 {
		for iNdEx := len(m.Hotels) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Hotels[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEstablishment(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpdateHotelRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateHotelRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateHotelRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Hotel != nil {
		{
			size, err := m.Hotel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEstablishment(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateHotelResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateHotelResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateHotelResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Hotel != nil {
		{
			size, err := m.Hotel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEstablishment(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteHotelRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteHotelRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteHotelRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.HotelId) > 0 {
		i -= len(m.HotelId)
		copy(dAtA[i:], m.HotelId)
		i = encodeVarintEstablishment(dAtA, i, uint64(len(m.HotelId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteHotelResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteHotelResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteHotelResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Favourite) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Favourite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Favourite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DeletedAt) > 0 {
		i -= len(m.DeletedAt)
		copy(dAtA[i:], m.DeletedAt)
		i = encodeVarintEstablishment(dAtA, i, uint64(len(m.DeletedAt)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.UpdatedAt) > 0 {
		i -= len(m.UpdatedAt)
		copy(dAtA[i:], m.UpdatedAt)
		i = encodeVarintEstablishment(dAtA, i, uint64(len(m.UpdatedAt)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CreatedAt) > 0 {
		i -= len(m.CreatedAt)
		copy(dAtA[i:], m.CreatedAt)
		i = encodeVarintEstablishment(dAtA, i, uint64(len(m.CreatedAt)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintEstablishment(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.EstablishmentId) > 0 {
		i -= len(m.EstablishmentId)
		copy(dAtA[i:], m.EstablishmentId)
		i = encodeVarintEstablishment(dAtA, i, uint64(len(m.EstablishmentId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FavouriteId) > 0 {
		i -= len(m.FavouriteId)
		copy(dAtA[i:], m.FavouriteId)
		i = encodeVarintEstablishment(dAtA, i, uint64(len(m.FavouriteId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddToFavouritesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddToFavouritesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddToFavouritesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Favourite != nil {
		{
			size, err := m.Favourite.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEstablishment(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddToFavouritesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddToFavouritesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddToFavouritesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Favourite != nil {
		{
			size, err := m.Favourite.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEstablishment(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RemoveFromFavouritesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveFromFavouritesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveFromFavouritesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FavouriteId) > 0 {
		i -= len(m.FavouriteId)
		copy(dAtA[i:], m.FavouriteId)
		i = encodeVarintEstablishment(dAtA, i, uint64(len(m.FavouriteId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RemoveFromFavouritesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveFromFavouritesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveFromFavouritesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListFavouritesByUserIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListFavouritesByUserIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListFavouritesByUserIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintEstablishment(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListFavouritesByUserIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListFavouritesByUserIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListFavouritesByUserIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Favourites) > 0 {
		for iNdEx := len(m.Favourites) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Favourites[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEstablishment(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Review) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Review) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Review) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DeletedAt) > 0 {
		i -= len(m.DeletedAt)
		copy(dAtA[i:], m.DeletedAt)
		i = encodeVarintEstablishment(dAtA, i, uint64(len(m.DeletedAt)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.UpdatedAt) > 0 {
		i -= len(m.UpdatedAt)
		copy(dAtA[i:], m.UpdatedAt)
		i = encodeVarintEstablishment(dAtA, i, uint64(len(m.UpdatedAt)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.CreatedAt) > 0 {
		i -= len(m.CreatedAt)
		copy(dAtA[i:], m.CreatedAt)
		i = encodeVarintEstablishment(dAtA, i, uint64(len(m.CreatedAt)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Comment) > 0 {
		i -= len(m.Comment)
		copy(dAtA[i:], m.Comment)
		i = encodeVarintEstablishment(dAtA, i, uint64(len(m.Comment)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Rating != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Rating))))
		i--
		dAtA[i] = 0x25
	}
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintEstablishment(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.EstablishmentId) > 0 {
		i -= len(m.EstablishmentId)
		copy(dAtA[i:], m.EstablishmentId)
		i = encodeVarintEstablishment(dAtA, i, uint64(len(m.EstablishmentId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ReviewId) > 0 {
		i -= len(m.ReviewId)
		copy(dAtA[i:], m.ReviewId)
		i = encodeVarintEstablishment(dAtA, i, uint64(len(m.ReviewId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateReviewRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateReviewRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateReviewRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Review != nil {
		{
			size, err := m.Review.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEstablishment(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateReviewResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateReviewResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateReviewResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Review != nil {
		{
			size, err := m.Review.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEstablishment(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListReviewsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListReviewsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListReviewsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.EstablishmentId) > 0 {
		i -= len(m.EstablishmentId)
		copy(dAtA[i:], m.EstablishmentId)
		i = encodeVarintEstablishment(dAtA, i, uint64(len(m.EstablishmentId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListReviewsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListReviewsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListReviewsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Count != 0 {
		i = encodeVarintEstablishment(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Reviews) > 0 {
		for iNdEx := len(m.Reviews) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Reviews[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEstablishment(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DeleteReviewRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteReviewRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteReviewRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ReviewId) > 0 {
		i -= len(m.ReviewId)
		copy(dAtA[i:], m.ReviewId)
		i = encodeVarintEstablishment(dAtA, i, uint64(len(m.ReviewId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteReviewResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteReviewResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteReviewResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEstablishment(dAtA []byte, offset int, v uint64) int {
	offset -= sovEstablishment(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Image) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ImageId)
	if l > 0 {
		n += 1 + l + sovEstablishment(uint64(l))
	}
	l = len(m.EstablishmentId)
	if l > 0 {
		n += 1 + l + sovEstablishment(uint64(l))
	}
	l = len(m.ImageUrl)
	if l > 0 {
		n += 1 + l + sovEstablishment(uint64(l))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovEstablishment(uint64(l))
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 1 + l + sovEstablishment(uint64(l))
	}
	l = len(m.DeletedAt)
	if l > 0 {
		n += 1 + l + sovEstablishment(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Location) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LocationId)
	if l > 0 {
		n += 1 + l + sovEstablishment(uint64(l))
	}
	l = len(m.EstablishmentId)
	if l > 0 {
		n += 1 + l + sovEstablishment(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovEstablishment(uint64(l))
	}
	if m.Latitude != 0 {
		n += 5
	}
	if m.Longitude != 0 {
		n += 5
	}
	l = len(m.Country)
	if l > 0 {
		n += 1 + l + sovEstablishment(uint64(l))
	}
	l = len(m.City)
	if l > 0 {
		n += 1 + l + sovEstablishment(uint64(l))
	}
	l = len(m.StateProvince)
	if l > 0 {
		n += 1 + l + sovEstablishment(uint64(l))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovEstablishment(uint64(l))
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 1 + l + sovEstablishment(uint64(l))
	}
	l = len(m.DeletedAt)
	if l > 0 {
		n += 1 + l + sovEstablishment(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Attraction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AttractionId)
	if l > 0 {
		n += 1 + l + sovEstablishment(uint64(l))
	}
	l = len(m.OwnerId)
	if l > 0 {
		n += 1 + l + sovEstablishment(uint64(l))
	}
	l = len(m.AttractionName)
	if l > 0 {
		n += 1 + l + sovEstablishment(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovEstablishment(uint64(l))
	}
	if m.Rating != 0 {
		n += 5
	}
	l = len(m.ContactNumber)
	if l > 0 {
		n += 1 + l + sovEstablishment(uint64(l))
	}
	l = len(m.LicenceUrl)
	if l > 0 {
		n += 1 + l + sovEstablishment(uint64(l))
	}
	l = len(m.WebsiteUrl)
	if l > 0 {
		n += 1 + l + sovEstablishment(uint64(l))
	}
	if len(m.Images) > 0 {
		for _, e := range m.Images {
			l = e.Size()
			n += 1 + l + sovEstablishment(uint64(l))
		}
	}
	if m.Location != nil {
		l = m.Location.Size()
		n += 1 + l + sovEstablishment(uint64(l))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovEstablishment(uint64(l))
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 1 + l + sovEstablishment(uint64(l))
	}
	l = len(m.DeletedAt)
	if l > 0 {
		n += 1 + l + sovEstablishment(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAttractionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AttractionId)
	if l > 0 {
		n += 1 + l + sovEstablishment(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAttractionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Attraction != nil {
		l = m.Attraction.Size()
		n += 1 + l + sovEstablishment(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListAttractionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Offset != 0 {
		n += 1 + sovEstablishment(uint64(m.Offset))
	}
	if m.Limit != 0 {
		n += 1 + sovEstablishment(uint64(m.Limit))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListAttractionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Attractions) > 0 {
		for _, e := range m.Attractions {
			l = e.Size()
			n += 1 + l + sovEstablishment(uint64(l))
		}
	}
	if m.Overall != 0 {
		n += 1 + sovEstablishment(uint64(m.Overall))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateAttractionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Attraction != nil {
		l = m.Attraction.Size()
		n += 1 + l + sovEstablishment(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateAttractionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Attraction != nil {
		l = m.Attraction.Size()
		n += 1 + l + sovEstablishment(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteAttractionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AttractionId)
	if l > 0 {
		n += 1 + l + sovEstablishment(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteAttractionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListAttractionsByLocationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Offset != 0 {
		n += 1 + sovEstablishment(uint64(m.Offset))
	}
	if m.Limit != 0 {
		n += 1 + sovEstablishment(uint64(m.Limit))
	}
	l = len(m.Country)
	if l > 0 {
		n += 1 + l + sovEstablishment(uint64(l))
	}
	l = len(m.City)
	if l > 0 {
		n += 1 + l + sovEstablishment(uint64(l))
	}
	l = len(m.StateProvince)
	if l > 0 {
		n += 1 + l + sovEstablishment(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListAttractionsByLocationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Attractions) > 0 {
		for _, e := range m.Attractions {
			l = e.Size()
			n += 1 + l + sovEstablishment(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Restaurant) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RestaurantId)
	if l > 0 {
		n += 1 + l + sovEstablishment(uint64(l))
	}
	l = len(m.OwnerId)
	if l > 0 {
		n += 1 + l + sovEstablishment(uint64(l))
	}
	l = len(m.RestaurantName)
	if l > 0 {
		n += 1 + l + sovEstablishment(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovEstablishment(uint64(l))
	}
	if m.Rating != 0 {
		n += 5
	}
	l = len(m.OpeningHours)
	if l > 0 {
		n += 1 + l + sovEstablishment(uint64(l))
	}
	l = len(m.ContactNumber)
	if l > 0 {
		n += 1 + l + sovEstablishment(uint64(l))
	}
	l = len(m.LicenceUrl)
	if l > 0 {
		n += 1 + l + sovEstablishment(uint64(l))
	}
	l = len(m.WebsiteUrl)
	if l > 0 {
		n += 1 + l + sovEstablishment(uint64(l))
	}
	if len(m.Images) > 0 {
		for _, e := range m.Images {
			l = e.Size()
			n += 1 + l + sovEstablishment(uint64(l))
		}
	}
	if m.Location != nil {
		l = m.Location.Size()
		n += 1 + l + sovEstablishment(uint64(l))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovEstablishment(uint64(l))
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 1 + l + sovEstablishment(uint64(l))
	}
	l = len(m.DeletedAt)
	if l > 0 {
		n += 1 + l + sovEstablishment(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetRestaurantRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RestaurantId)
	if l > 0 {
		n += 1 + l + sovEstablishment(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetRestaurantResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Restaurant != nil {
		l = m.Restaurant.Size()
		n += 1 + l + sovEstablishment(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListRestaurantsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Offset != 0 {
		n += 1 + sovEstablishment(uint64(m.Offset))
	}
	if m.Limit != 0 {
		n += 1 + sovEstablishment(uint64(m.Limit))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListRestaurantsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Restaurants) > 0 {
		for _, e := range m.Restaurants {
			l = e.Size()
			n += 1 + l + sovEstablishment(uint64(l))
		}
	}
	if m.Overall != 0 {
		n += 1 + sovEstablishment(uint64(m.Overall))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateRestaurantRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Restaurant != nil {
		l = m.Restaurant.Size()
		n += 1 + l + sovEstablishment(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateRestaurantResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Restaurant != nil {
		l = m.Restaurant.Size()
		n += 1 + l + sovEstablishment(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteRestaurantRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RestaurantId)
	if l > 0 {
		n += 1 + l + sovEstablishment(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteRestaurantResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Hotel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.HotelId)
	if l > 0 {
		n += 1 + l + sovEstablishment(uint64(l))
	}
	l = len(m.OwnerId)
	if l > 0 {
		n += 1 + l + sovEstablishment(uint64(l))
	}
	l = len(m.HotelName)
	if l > 0 {
		n += 1 + l + sovEstablishment(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovEstablishment(uint64(l))
	}
	if m.Rating != 0 {
		n += 5
	}
	l = len(m.ContactNumber)
	if l > 0 {
		n += 1 + l + sovEstablishment(uint64(l))
	}
	l = len(m.LicenceUrl)
	if l > 0 {
		n += 1 + l + sovEstablishment(uint64(l))
	}
	l = len(m.WebsiteUrl)
	if l > 0 {
		n += 1 + l + sovEstablishment(uint64(l))
	}
	if len(m.Images) > 0 {
		for _, e := range m.Images {
			l = e.Size()
			n += 1 + l + sovEstablishment(uint64(l))
		}
	}
	if m.Location != nil {
		l = m.Location.Size()
		n += 1 + l + sovEstablishment(uint64(l))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovEstablishment(uint64(l))
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 1 + l + sovEstablishment(uint64(l))
	}
	l = len(m.DeletedAt)
	if l > 0 {
		n += 1 + l + sovEstablishment(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetHotelRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.HotelId)
	if l > 0 {
		n += 1 + l + sovEstablishment(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetHotelResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Hotel != nil {
		l = m.Hotel.Size()
		n += 1 + l + sovEstablishment(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListHotelsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Offset != 0 {
		n += 1 + sovEstablishment(uint64(m.Offset))
	}
	if m.Limit != 0 {
		n += 1 + sovEstablishment(uint64(m.Limit))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListHotelsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Hotels) > 0 {
		for _, e := range m.Hotels {
			l = e.Size()
			n += 1 + l + sovEstablishment(uint64(l))
		}
	}
	if m.Overall != 0 {
		n += 1 + sovEstablishment(uint64(m.Overall))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateHotelRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Hotel != nil {
		l = m.Hotel.Size()
		n += 1 + l + sovEstablishment(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateHotelResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Hotel != nil {
		l = m.Hotel.Size()
		n += 1 + l + sovEstablishment(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteHotelRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.HotelId)
	if l > 0 {
		n += 1 + l + sovEstablishment(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteHotelResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Favourite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FavouriteId)
	if l > 0 {
		n += 1 + l + sovEstablishment(uint64(l))
	}
	l = len(m.EstablishmentId)
	if l > 0 {
		n += 1 + l + sovEstablishment(uint64(l))
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovEstablishment(uint64(l))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovEstablishment(uint64(l))
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 1 + l + sovEstablishment(uint64(l))
	}
	l = len(m.DeletedAt)
	if l > 0 {
		n += 1 + l + sovEstablishment(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddToFavouritesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Favourite != nil {
		l = m.Favourite.Size()
		n += 1 + l + sovEstablishment(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddToFavouritesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Favourite != nil {
		l = m.Favourite.Size()
		n += 1 + l + sovEstablishment(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RemoveFromFavouritesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FavouriteId)
	if l > 0 {
		n += 1 + l + sovEstablishment(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RemoveFromFavouritesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListFavouritesByUserIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovEstablishment(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListFavouritesByUserIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Favourites) > 0 {
		for _, e := range m.Favourites {
			l = e.Size()
			n += 1 + l + sovEstablishment(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Review) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ReviewId)
	if l > 0 {
		n += 1 + l + sovEstablishment(uint64(l))
	}
	l = len(m.EstablishmentId)
	if l > 0 {
		n += 1 + l + sovEstablishment(uint64(l))
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovEstablishment(uint64(l))
	}
	if m.Rating != 0 {
		n += 5
	}
	l = len(m.Comment)
	if l > 0 {
		n += 1 + l + sovEstablishment(uint64(l))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovEstablishment(uint64(l))
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 1 + l + sovEstablishment(uint64(l))
	}
	l = len(m.DeletedAt)
	if l > 0 {
		n += 1 + l + sovEstablishment(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateReviewRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Review != nil {
		l = m.Review.Size()
		n += 1 + l + sovEstablishment(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateReviewResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Review != nil {
		l = m.Review.Size()
		n += 1 + l + sovEstablishment(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListReviewsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EstablishmentId)
	if l > 0 {
		n += 1 + l + sovEstablishment(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListReviewsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Reviews) > 0 {
		for _, e := range m.Reviews {
			l = e.Size()
			n += 1 + l + sovEstablishment(uint64(l))
		}
	}
	if m.Count != 0 {
		n += 1 + sovEstablishment(uint64(m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteReviewRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ReviewId)
	if l > 0 {
		n += 1 + l + sovEstablishment(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteReviewResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovEstablishment(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEstablishment(x uint64) (n int) {
	return sovEstablishment(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Image) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEstablishment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Image: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Image: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EstablishmentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EstablishmentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeletedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEstablishment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEstablishment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Location) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEstablishment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Location: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Location: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EstablishmentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EstablishmentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latitude", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Latitude = float32(math.Float32frombits(v))
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Longitude", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Longitude = float32(math.Float32frombits(v))
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.City = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateProvince", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateProvince = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeletedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEstablishment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEstablishment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Attraction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEstablishment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Attraction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Attraction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttractionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttractionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttractionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttractionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rating", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Rating = float32(math.Float32frombits(v))
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContactNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LicenceUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LicenceUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebsiteUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WebsiteUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Images", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Images = append(m.Images, &Image{})
			if err := m.Images[len(m.Images)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Location == nil {
				m.Location = &Location{}
			}
			if err := m.Location.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeletedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEstablishment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEstablishment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAttractionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEstablishment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAttractionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAttractionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttractionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttractionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEstablishment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEstablishment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAttractionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEstablishment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAttractionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAttractionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attraction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attraction == nil {
				m.Attraction = &Attraction{}
			}
			if err := m.Attraction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEstablishment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEstablishment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListAttractionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEstablishment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListAttractionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListAttractionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEstablishment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEstablishment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListAttractionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEstablishment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListAttractionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListAttractionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attractions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attractions = append(m.Attractions, &Attraction{})
			if err := m.Attractions[len(m.Attractions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Overall", wireType)
			}
			m.Overall = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Overall |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEstablishment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEstablishment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateAttractionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEstablishment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateAttractionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateAttractionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attraction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attraction == nil {
				m.Attraction = &Attraction{}
			}
			if err := m.Attraction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEstablishment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEstablishment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateAttractionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEstablishment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateAttractionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateAttractionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attraction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attraction == nil {
				m.Attraction = &Attraction{}
			}
			if err := m.Attraction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEstablishment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEstablishment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteAttractionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEstablishment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteAttractionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteAttractionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttractionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttractionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEstablishment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEstablishment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteAttractionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEstablishment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteAttractionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteAttractionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEstablishment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEstablishment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListAttractionsByLocationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEstablishment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListAttractionsByLocationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListAttractionsByLocationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.City = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateProvince", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateProvince = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEstablishment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEstablishment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListAttractionsByLocationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEstablishment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListAttractionsByLocationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListAttractionsByLocationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attractions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attractions = append(m.Attractions, &Attraction{})
			if err := m.Attractions[len(m.Attractions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEstablishment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEstablishment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Restaurant) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEstablishment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Restaurant: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Restaurant: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RestaurantId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RestaurantId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RestaurantName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RestaurantName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rating", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Rating = float32(math.Float32frombits(v))
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpeningHours", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpeningHours = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContactNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LicenceUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LicenceUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebsiteUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WebsiteUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Images", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Images = append(m.Images, &Image{})
			if err := m.Images[len(m.Images)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Location == nil {
				m.Location = &Location{}
			}
			if err := m.Location.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeletedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEstablishment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEstablishment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRestaurantRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEstablishment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRestaurantRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRestaurantRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RestaurantId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RestaurantId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEstablishment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEstablishment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRestaurantResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEstablishment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRestaurantResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRestaurantResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Restaurant", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Restaurant == nil {
				m.Restaurant = &Restaurant{}
			}
			if err := m.Restaurant.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEstablishment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEstablishment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListRestaurantsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEstablishment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListRestaurantsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListRestaurantsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEstablishment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEstablishment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListRestaurantsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEstablishment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListRestaurantsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListRestaurantsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Restaurants", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Restaurants = append(m.Restaurants, &Restaurant{})
			if err := m.Restaurants[len(m.Restaurants)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Overall", wireType)
			}
			m.Overall = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Overall |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEstablishment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEstablishment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateRestaurantRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEstablishment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateRestaurantRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateRestaurantRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Restaurant", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Restaurant == nil {
				m.Restaurant = &Restaurant{}
			}
			if err := m.Restaurant.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEstablishment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEstablishment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateRestaurantResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEstablishment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateRestaurantResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateRestaurantResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Restaurant", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Restaurant == nil {
				m.Restaurant = &Restaurant{}
			}
			if err := m.Restaurant.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEstablishment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEstablishment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteRestaurantRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEstablishment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteRestaurantRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteRestaurantRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RestaurantId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RestaurantId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEstablishment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEstablishment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteRestaurantResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEstablishment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteRestaurantResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteRestaurantResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEstablishment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEstablishment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Hotel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEstablishment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Hotel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Hotel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HotelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HotelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HotelName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HotelName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rating", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Rating = float32(math.Float32frombits(v))
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContactNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LicenceUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LicenceUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebsiteUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WebsiteUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Images", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Images = append(m.Images, &Image{})
			if err := m.Images[len(m.Images)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Location == nil {
				m.Location = &Location{}
			}
			if err := m.Location.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeletedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEstablishment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEstablishment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetHotelRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEstablishment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetHotelRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetHotelRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HotelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HotelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEstablishment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEstablishment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetHotelResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEstablishment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetHotelResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetHotelResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hotel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Hotel == nil {
				m.Hotel = &Hotel{}
			}
			if err := m.Hotel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEstablishment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEstablishment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListHotelsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEstablishment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListHotelsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListHotelsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEstablishment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEstablishment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListHotelsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEstablishment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListHotelsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListHotelsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hotels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hotels = append(m.Hotels, &Hotel{})
			if err := m.Hotels[len(m.Hotels)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Overall", wireType)
			}
			m.Overall = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Overall |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEstablishment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEstablishment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateHotelRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEstablishment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateHotelRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateHotelRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hotel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Hotel == nil {
				m.Hotel = &Hotel{}
			}
			if err := m.Hotel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEstablishment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEstablishment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateHotelResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEstablishment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateHotelResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateHotelResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hotel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Hotel == nil {
				m.Hotel = &Hotel{}
			}
			if err := m.Hotel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEstablishment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEstablishment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteHotelRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEstablishment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteHotelRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteHotelRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HotelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HotelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEstablishment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEstablishment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteHotelResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEstablishment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteHotelResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteHotelResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEstablishment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEstablishment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Favourite) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEstablishment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Favourite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Favourite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FavouriteId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FavouriteId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EstablishmentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EstablishmentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeletedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEstablishment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEstablishment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddToFavouritesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEstablishment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddToFavouritesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddToFavouritesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Favourite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Favourite == nil {
				m.Favourite = &Favourite{}
			}
			if err := m.Favourite.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEstablishment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEstablishment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddToFavouritesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEstablishment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddToFavouritesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddToFavouritesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Favourite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Favourite == nil {
				m.Favourite = &Favourite{}
			}
			if err := m.Favourite.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEstablishment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEstablishment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveFromFavouritesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEstablishment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveFromFavouritesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveFromFavouritesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FavouriteId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FavouriteId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEstablishment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEstablishment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveFromFavouritesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEstablishment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveFromFavouritesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveFromFavouritesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEstablishment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEstablishment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListFavouritesByUserIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEstablishment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListFavouritesByUserIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListFavouritesByUserIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEstablishment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEstablishment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListFavouritesByUserIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEstablishment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListFavouritesByUserIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListFavouritesByUserIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Favourites", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Favourites = append(m.Favourites, &Favourite{})
			if err := m.Favourites[len(m.Favourites)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEstablishment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEstablishment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Review) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEstablishment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Review: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Review: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReviewId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReviewId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EstablishmentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EstablishmentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rating", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Rating = float32(math.Float32frombits(v))
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeletedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEstablishment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEstablishment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateReviewRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEstablishment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateReviewRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateReviewRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Review", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Review == nil {
				m.Review = &Review{}
			}
			if err := m.Review.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEstablishment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEstablishment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateReviewResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEstablishment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateReviewResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateReviewResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Review", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Review == nil {
				m.Review = &Review{}
			}
			if err := m.Review.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEstablishment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEstablishment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListReviewsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEstablishment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListReviewsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListReviewsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EstablishmentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EstablishmentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEstablishment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEstablishment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListReviewsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEstablishment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListReviewsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListReviewsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reviews", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reviews = append(m.Reviews, &Review{})
			if err := m.Reviews[len(m.Reviews)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEstablishment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEstablishment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteReviewRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEstablishment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteReviewRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteReviewRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReviewId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstablishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstablishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReviewId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEstablishment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEstablishment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteReviewResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEstablishment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteReviewResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteReviewResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEstablishment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEstablishment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEstablishment(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEstablishment
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEstablishment
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEstablishment
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEstablishment
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEstablishment
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEstablishment        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEstablishment          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEstablishment = fmt.Errorf("proto: unexpected end of group")
)
